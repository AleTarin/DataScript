/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,30],$V1=[2,7],$V2=[1,8],$V3=[2,18],$V4=[1,10],$V5=[2,10],$V6=[1,13],$V7=[10,16,30,51,56,116,117,118,126,128,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[1,31],$Ve=[1,34],$Vf=[1,37],$Vg=[2,16],$Vh=[1,39],$Vi=[21,24,27,34,49],$Vj=[1,53],$Vk=[2,39],$Vl=[1,52],$Vm=[1,58],$Vn=[1,57],$Vo=[1,54],$Vp=[1,77],$Vq=[1,78],$Vr=[1,76],$Vs=[1,79],$Vt=[1,80],$Vu=[1,82],$Vv=[1,81],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[16,51,56,116,117,118,126,128,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],$VJ=[1,112],$VK=[1,120],$VL=[1,113],$VM=[1,107],$VN=[1,111],$VO=[1,110],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,123],$VU=[21,24,29,34,79,80,81,82,83,84,85,86,87,88,94,95],$VV=[21,24,29,34,79,80,81,82,83,84,85,86,87,88,94,95,100,101,102],$VW=[16,27,28,106,107,108,109],$VX=[16,27,28,32,94,95,106,107,108,109],$VY=[21,24,34],$VZ=[21,24,29,34,79,80,81,82,83,84,85,86,87,88],$V_=[21,29],$V$=[24,34,87,88],$V01=[24,34],$V11=[21,24,29,34,68,79,80,81,82,83,84,85,86,87,88,94,95,100,101,102];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROGRAM":4,"p1":5,"p2":6,"COLON":7,"var":8,"modules":9,"MAIN":10,"p4":11,"block":12,"END":13,"p3":14,"EOF":15,"ID":16,"VAR":17,"var-recursive":18,"var-follow":19,"v3":20,"COMMA":21,"v2":22,"var-index":23,"SEMICOLON":24,"new-structure":25,"type":26,"LBRACKET":27,"CTEI":28,"RBRACKET":29,"FUNCTION":30,"module1":31,"LPAREN":32,"params":33,"RPAREN":34,"module4":35,"block-vars":36,"module-type":37,"VOID":38,"module2":39,"module3":40,"params-recursive":41,"INT":42,"FLOAT":43,"BOOL":44,"STRING":45,"structures":46,"VECTOR":47,"DATASET":48,"LBRACE":49,"block-inside":50,"RBRACE":51,"module5":52,"module6":53,"statement":54,"return-statement":55,"RETURN":56,"exp":57,"array":58,"array-item":59,"assignation":60,"condition":61,"cycle":62,"print":63,"read":64,"call":65,"native-functions":66,"var-cte-exp":67,"ASSIGN":68,"and-or-expression":69,"expression":70,"exp2":71,"expression-recursive":72,"exp1":73,"expression-op":74,"hexp2":75,"and-or-expression-recursive":76,"hexp1":77,"and-or-expression-op":78,"GREATER":79,"GREATER_EQUAL":80,"LESSER":81,"LESSER_EQUAL":82,"DIFF":83,"DEEP_DIFF":84,"EQUAL":85,"DEEP_EQUAL":86,"AND":87,"OR":88,"term":89,"e2":90,"exp-recursive":91,"e1":92,"exp-op":93,"MINUS":94,"PLUS":95,"factor":96,"t2":97,"term-recursive":98,"term-op":99,"TIMES":100,"REST":101,"DIVIDE":102,"t1":103,"factor-op":104,"var-cte":105,"CTEF":106,"CTES":107,"TRUE":108,"FALSE":109,"call1":110,"call2":111,"call-exp":112,"call5":113,"call3":114,"call4":115,"READLINE":116,"PRINT":117,"IF":118,"cond1":119,"condition-else":120,"cond2":121,"ELSE":122,"cond3":123,"cycle-for":124,"cycle-while":125,"FOREACH":126,"IN":127,"WHILE":128,"while1":129,"while2":130,"while3":131,"rbind":132,"cbind":133,"setNames":134,"getNames":135,"row":136,"col":137,"head":138,"tail":139,"stdev":140,"range":141,"min":142,"max":143,"variance":144,"dnorm":145,"dbinomial":146,"duniform":147,"plot":148,"RBIND":149,"CBIND":150,"GETNAMES":151,"SETNAMES":152,"ROW":153,"COL":154,"HEAD":155,"TAIL":156,"STDEV":157,"RANGE":158,"MIN":159,"MAX":160,"VARIANCE":161,"DNORM":162,"DBINOMAIL":163,"DUNIFORM":164,"barPlot":165,"PLOT":166,"linePlot":167,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",7:"COLON",10:"MAIN",13:"END",15:"EOF",16:"ID",17:"VAR",21:"COMMA",24:"SEMICOLON",25:"new-structure",27:"LBRACKET",28:"CTEI",29:"RBRACKET",30:"FUNCTION",32:"LPAREN",34:"RPAREN",38:"VOID",42:"INT",43:"FLOAT",44:"BOOL",45:"STRING",47:"VECTOR",48:"DATASET",49:"LBRACE",51:"RBRACE",56:"RETURN",68:"ASSIGN",79:"GREATER",80:"GREATER_EQUAL",81:"LESSER",82:"LESSER_EQUAL",83:"DIFF",84:"DEEP_DIFF",85:"EQUAL",86:"DEEP_EQUAL",87:"AND",88:"OR",94:"MINUS",95:"PLUS",100:"TIMES",101:"REST",102:"DIVIDE",106:"CTEF",107:"CTES",108:"TRUE",109:"FALSE",116:"READLINE",117:"PRINT",118:"IF",122:"ELSE",126:"FOREACH",127:"IN",128:"WHILE",148:"plot",149:"RBIND",150:"CBIND",151:"GETNAMES",152:"SETNAMES",153:"ROW",154:"COL",155:"HEAD",156:"TAIL",157:"STDEV",158:"RANGE",159:"MIN",160:"MAX",161:"VARIANCE",162:"DNORM",163:"DBINOMAIL",164:"DUNIFORM",166:"PLOT"},
productions_: [0,[3,12],[5,0],[6,1],[14,0],[11,0],[8,3],[8,0],[18,1],[18,3],[18,0],[19,5],[19,4],[22,1],[20,1],[23,4],[23,0],[9,9],[9,0],[37,1],[37,1],[33,5],[41,2],[41,0],[31,1],[39,1],[40,1],[35,1],[26,1],[26,1],[26,1],[26,1],[26,1],[46,1],[46,1],[12,3],[36,6],[50,2],[50,1],[50,0],[53,0],[52,0],[55,3],[58,3],[59,3],[59,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,2],[54,1],[60,5],[60,4],[70,3],[72,2],[72,0],[73,1],[71,0],[69,3],[76,2],[76,0],[77,1],[75,0],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[78,1],[78,1],[57,3],[91,2],[91,0],[93,1],[93,1],[92,1],[90,0],[89,3],[99,1],[99,1],[99,1],[98,2],[98,0],[103,1],[97,0],[96,3],[96,2],[96,1],[104,1],[104,1],[104,0],[105,2],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[67,4],[67,0],[65,6],[112,5],[112,1],[110,1],[111,0],[114,0],[115,0],[113,0],[64,7],[63,5],[61,8],[120,3],[120,0],[119,0],[121,0],[123,0],[62,1],[62,1],[124,7],[125,8],[129,0],[130,0],[131,0],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[132,7],[133,9],[135,4],[134,6],[136,6],[137,6],[138,6],[139,6],[140,4],[141,4],[142,4],[143,4],[144,4],[145,8],[146,8],[147,8],[165,4],[167,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 yy.parser.createDir() 
break;
case 3:
 yy.parser.setName($$[$0]) 
break;
case 4:
 yy.parser.deleteDir() 
break;
case 5:
 yy.parser.setMain() 
break;
case 13:
 yy.parser.setType($$[$0]) 
break;
case 14:
 yy.parser.setVars($$[$0]); 
break;
case 24:
 yy.parser.setTable($$[$0]) 
break;
case 25:
 yy.parser.setParams($$[$0]) 
break;
case 26:
 yy.parser.setParamsType($$[$0])
break;
case 27:
 yy.parser.setFunType($$[$0])
break;
case 40:
 yy.parser.deleteFunction(); 
break;
case 41: case 42:
 yy.parser.setFunParams()
break;
case 44:
 this.$ = $$[$0-2] + ',' + $$[$0] 
break;
case 45:
 this.$ = $$[$0] 
break;
case 54:
yy.parser.processAssign($$[$0-3], $$[$0-1])
break;
case 58: case 63: case 80: case 88:
 yy.parser.poperPush($$[$0]) 
break;
case 59:
yy.parser.processExp()
break;
case 64:
yy.parser.processHypExp()
break;
case 81:
yy.parser.processTerm()
break;
case 89:
yy.parser.processFactor()
break;
case 97:
yy.parser.addQuadVar($$[$0])
break;
case 98:
yy.parser.addQuadConst($$[$0],'int')
break;
case 99:
yy.parser.addQuadConst($$[$0],'float')
break;
case 100:
yy.parser.addQuadConst($$[$0],'string')
break;
case 101:
yy.parser.addQuadConst($$[$0],'bool')
break;
case 102:
yy.parser.addQuadConst($$[$0], 'bool')
break;
case 110:
 yy.parser.checkProcedure($$[$0]) 
break;
case 111:
 yy.parser.genERA() 
break;
case 112:
 yy.parser.getArgument() 
break;
case 113:
 yy.parser.nextArgument() 
break;
case 114:
 yy.parser.genGOSUB() 
break;
case 115:
 yy.parser.processReadLine($$[$0-2]) 
break;
case 116:
 yy.parser.processPrint() 
break;
case 120:
yy.parser.processCond()
break;
case 121:
yy.parser.endCond()
break;
case 122:
yy.parser.processElse()
break;
case 127:
 yy.parser.pushJump()
break;
case 128:
 yy.parser.processWhile()
break;
case 129:
 yy.parser.endWhile()
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,16:[2,2]},{6:4,16:[1,5]},{7:[1,6]},{7:[2,3]},o($V0,$V1,{8:7,17:$V2}),{9:9,10:$V3,30:$V4},{7:$V5,16:$V6,18:11,20:12},{10:[1,14]},{16:[1,16],31:15},{7:[1,18],19:17},{7:[2,8],21:[1,19]},o([7,21],[2,14]),{11:20,49:[2,5]},{32:[1,21]},{32:[2,24]},o($V7,[2,6]),{22:22,25:[1,23],26:24,42:$V8,43:$V9,44:$Va,45:$Vb,46:29,47:$Vc,48:$Vd},{7:$V5,16:$V6,18:32,20:12},{12:33,49:$Ve},{16:$Vf,33:35,39:36},{23:38,24:$Vg,27:$Vh},{24:[1,40]},o([24,27],[2,13]),o($Vi,[2,28]),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),{7:[2,9]},{13:[1,41]},{16:$Vj,50:42,51:$Vk,54:43,55:44,56:$Vl,60:45,61:46,62:47,63:48,64:49,65:50,66:51,110:59,116:$Vm,117:$Vn,118:$Vo,124:55,125:56,126:$Vp,128:$Vq,132:60,133:61,134:62,135:63,136:64,137:65,138:66,139:67,140:68,141:69,142:70,143:71,144:72,145:73,146:74,147:75,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw,154:$Vx,155:$Vy,156:$Vz,157:$VA,158:$VB,159:$VC,160:$VD,161:$VE,162:$VF,163:$VG,164:$VH},{34:[1,95]},{7:[1,96]},{7:[2,25]},{24:[1,97]},{28:[1,98]},o($V7,$V1,{8:99,17:$V2}),{14:100,15:[2,4]},{51:[1,101]},{16:$Vj,50:102,51:$Vk,54:43,55:44,56:$Vl,60:45,61:46,62:47,63:48,64:49,65:50,66:51,110:59,116:$Vm,117:$Vn,118:$Vo,124:55,125:56,126:$Vp,128:$Vq,132:60,133:61,134:62,135:63,136:64,137:65,138:66,139:67,140:68,141:69,142:70,143:71,144:72,145:73,146:74,147:75,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw,154:$Vx,155:$Vy,156:$Vz,157:$VA,158:$VB,159:$VC,160:$VD,161:$VE,162:$VF,163:$VG,164:$VH},{51:[2,38]},o($VI,[2,46]),o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,49]),o($VI,[2,50]),{24:[1,103]},o($VI,[2,52]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:104,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{27:$VT,32:[2,110],67:121,68:[1,122]},{32:[1,124]},o($VI,[2,123]),o($VI,[2,124]),{32:[1,125]},{32:[1,126]},{32:[1,127]},o($VI,[2,130]),o($VI,[2,131]),o($VI,[2,132]),o($VI,[2,133]),o($VI,[2,134]),o($VI,[2,135]),o($VI,[2,136]),o($VI,[2,137]),o($VI,[2,138]),o($VI,[2,139]),o($VI,[2,140]),o($VI,[2,141]),o($VI,[2,142]),o($VI,[2,143]),o($VI,[2,144]),o($VI,[2,145]),o($VI,[2,146]),{32:[1,128]},{32:[2,127],129:129},{32:[1,130]},{32:[1,131]},{32:[1,132]},{32:[1,133]},{32:[1,134]},{32:[1,135]},{32:[1,136]},{32:[1,137]},{32:[1,138]},{32:[1,139]},{32:[1,140]},{32:[1,141]},{32:[1,142]},{32:[1,143]},{32:[1,144]},{32:[1,145]},{7:[1,146]},{26:148,40:147,42:$V8,43:$V9,44:$Va,45:$Vb,46:29,47:$Vc,48:$Vd},o($V7,$V1,{8:149,17:$V2}),{29:[1,150]},o($V7,[2,12]),{15:[1,151]},o([13,16,51,56,116,117,118,122,126,128,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],[2,35]),{51:[2,37]},o($VI,[2,51]),{24:[1,152]},o($VU,[2,81],{90:153}),o($VV,[2,89],{97:154}),{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,70:155,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,58:118,65:119,105:157,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VV,[2,92]),o($VW,[2,93]),o($VW,[2,94]),o([21,24,29,32,34,79,80,81,82,83,84,85,86,87,88,94,95,100,101,102],[2,97],{67:158,27:$VT}),o($VV,[2,98]),o($VV,[2,99]),o($VV,[2,100]),o($VV,[2,101]),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:160,58:118,59:159,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{68:[1,161]},{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,69:162,70:163,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:164,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,69:165,70:163,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:166,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:167,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VX,[2,111],{111:168}),{16:[1,169]},{32:[1,170]},{16:[1,171]},{16:[1,172]},{16:[1,173]},{16:[1,174]},{16:[1,175]},{16:[1,176]},{16:[1,177]},{16:[1,178]},{16:[1,179]},{16:[1,180]},{16:[1,181]},{16:[1,182]},{16:[1,183]},{16:$VJ,27:$VK,28:$VL,32:$VM,57:184,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:185,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:186,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{26:189,35:187,37:188,38:[1,190],42:$V8,43:$V9,44:$Va,45:$Vb,46:29,47:$Vc,48:$Vd},o([21,34],$Vg,{23:191,27:$Vh}),o([21,27,34],[2,26]),o($V7,[2,11]),o($VY,$Vg,{23:192,27:$Vh}),{1:[2,1]},{51:[2,42]},o($VZ,[2,77],{91:193,92:194,93:195,94:[1,196],95:[1,197]}),o($VU,[2,87],{98:198,103:199,99:200,100:[1,201],101:[1,202],102:[1,203]}),{34:[1,204]},o([24,34,79,80,81,82,83,84,85,86,87,88],[2,59],{71:205}),o($VV,[2,91]),o($VV,[2,96]),{21:[1,207],29:[1,206]},o($V_,[2,45]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,69:208,70:163,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{24:[1,209]},o($V$,[2,64],{75:210}),{29:[1,211]},{34:[1,212]},{34:[1,213]},{21:[1,214]},{16:$VJ,27:$VK,28:$VL,32:$VM,57:216,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59,112:215},{127:[1,217]},{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,69:218,70:163,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{21:[1,219]},{21:[1,220]},{21:[1,221]},{34:[1,222]},{21:[1,223]},{21:[1,224]},{21:[1,225]},{21:[1,226]},{34:[1,227]},{34:[1,228]},{34:[1,229]},{34:[1,230]},{34:[1,231]},{21:[1,232]},{21:[1,233]},{21:[1,234]},{36:235,49:[1,236]},{49:[2,27]},{49:[2,19]},{49:[2,20]},{21:[1,238],34:[2,23],41:237},o($VY,[2,15]),o($VZ,[2,75]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:239,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VX,[2,80]),o($VX,[2,78]),o($VX,[2,79]),o($VU,[2,82]),{16:$VJ,27:$VK,28:$VL,32:$VM,58:118,65:119,89:240,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VX,[2,88]),o($VX,[2,83]),o($VX,[2,84]),o($VX,[2,85]),o($VV,[2,90]),o($V$,[2,57],{72:241,73:242,74:243,79:[1,244],80:[1,245],81:[1,246],82:[1,247],83:[1,248],84:[1,249],85:[1,250],86:[1,251]}),o($VV,[2,43]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:252,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{24:[1,253]},o($VI,[2,54]),o($V01,[2,62],{76:254,77:255,78:256,87:[1,257],88:[1,258]}),o($V11,[2,106],{67:259,27:$VT}),{49:[2,120],119:260},{24:[1,261]},{16:[1,262]},{34:[1,263]},{21:[2,112],34:[2,109],114:264},{16:[1,265]},{34:[1,266]},{16:[1,267]},{16:[1,268]},{47:[1,269]},o($VI,[2,149]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:270,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:271,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:272,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:273,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VI,[2,155]),o($VI,[2,156]),o($VI,[2,157]),o($VI,[2,158]),o($VI,[2,159]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:274,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:275,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:276,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{9:277,10:$V3,30:$V4},o($VI,$V1,{8:278,17:$V2}),{34:[2,21]},{16:$Vf,33:279,39:36},o($VZ,[2,76]),o($VU,[2,86]),o($V$,[2,55]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,70:280,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VX,[2,58]),o($VX,[2,65]),o($VX,[2,66]),o($VX,[2,67]),o($VX,[2,68]),o($VX,[2,69]),o($VX,[2,70]),o($VX,[2,71]),o($VX,[2,72]),o($V_,[2,44]),o($VI,[2,53]),o($V01,[2,60]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:156,58:118,65:119,69:281,70:163,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VX,[2,63]),o($VX,[2,73]),o($VX,[2,74]),o($V11,[2,105]),{12:282,49:$Ve},o($VI,[2,116]),{34:[1,283]},o($VV,[2,114],{113:284}),{21:[1,285]},{34:[1,286]},{49:[2,128],130:287},{34:[1,288]},{21:[1,289]},{34:[1,290]},{34:[1,291]},{34:[1,292]},{34:[1,293]},{34:[1,294]},{21:[1,295]},{21:[1,296]},{21:[1,297]},{10:[2,17]},o($VI,[2,41],{52:298}),{34:[2,22]},o($V$,[2,56]),o($V01,[2,61]),o($VI,[2,119],{120:299,122:[1,300]}),{24:[1,301]},o($VV,[2,107]),o($VX,[2,113],{115:302}),{12:303,49:$Ve},{12:304,49:$Ve},{24:[1,305]},{16:$VJ,27:$VK,28:$VL,32:$VM,57:306,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},o($VI,[2,150]),o($VI,[2,151]),o($VI,[2,152]),o($VI,[2,153]),o($VI,[2,154]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:307,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:308,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$VJ,27:$VK,28:$VL,32:$VM,57:309,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59},{16:$Vj,50:310,51:$Vk,54:43,55:44,56:$Vl,60:45,61:46,62:47,63:48,64:49,65:50,66:51,110:59,116:$Vm,117:$Vn,118:$Vo,124:55,125:56,126:$Vp,128:$Vq,132:60,133:61,134:62,135:63,136:64,137:65,138:66,139:67,140:68,141:69,142:70,143:71,144:72,145:73,146:74,147:75,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw,154:$Vx,155:$Vy,156:$Vz,157:$VA,158:$VB,159:$VC,160:$VD,161:$VE,162:$VF,163:$VG,164:$VH},o($VI,[2,121],{121:311}),{49:[2,122],123:312},o($VI,[2,115]),{16:$VJ,27:$VK,28:$VL,32:$VM,57:216,58:118,65:119,89:105,94:$VN,95:$VO,96:106,104:108,105:109,106:$VP,107:$VQ,108:$VR,109:$VS,110:59,112:313},o($VI,[2,125]),o($VI,[2,129],{131:314}),o($VI,[2,147]),{34:[1,315]},{34:[1,316]},{34:[1,317]},{34:[1,318]},{51:[1,319]},o($VI,[2,117]),{12:320,49:$Ve},{34:[2,108]},o($VI,[2,126]),{24:[1,321]},o($VI,[2,160]),o($VI,[2,161]),o($VI,[2,162]),o($V0,[2,40],{53:322}),o($VI,[2,118]),o($VI,[2,148]),o($V0,[2,36])],
defaultActions: {5:[2,3],16:[2,24],32:[2,9],37:[2,25],44:[2,38],102:[2,37],151:[2,1],152:[2,42],188:[2,27],189:[2,19],190:[2,20],237:[2,21],277:[2,17],279:[2,22],313:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var actions = require('./actions');
const { 
  createDir, deleteDir, setName,
  setVars, setType, setTable,
  addQuadVar, addQuadConst, poperPush,
  processTerm, processAssign, processFactor, 
  processExp, processHypExp, 
  processCond, endCond, processElse,
  pushJump, processWhile, endWhile,
  deleteFunction, setFunType, setFunParams,
  setParams, setParamsType, setMain,
  checkProcedure, genERA, getArgument, nextArgument, genGOSUB
} = actions;

parser.createDir         = _                 => createDir();
parser.setName           = NAME              => setName(NAME);
parser.deleteDir         = _                 => deleteDir();
parser.setVars           = ID                => setVars(ID);
parser.setType           = TYPE              => setType(TYPE);
parser.setTable          = ID                 => setTable(ID);
parser.addQuadVar        = ID                => addQuadVar(ID);
parser.addQuadConst      = (DATA, TYPE)      => addQuadConst(DATA, TYPE);
parser.poperPush         = OP                => poperPush(OP);
parser.processTerm       = _                 => processTerm();
parser.processFactor     = _                 => processFactor();
parser.processAssign     = ID                => processAssign(ID);
parser.processExp        = _                 => processExp();
parser.processHypExp     = _                 => processHypExp();
parser.processCond       = _                 => processCond();
parser.endCond           = _                 => endCond();
parser.processElse       = _                 => processElse();
parser.pushJump          = _                 => pushJump();
parser.processWhile      = _                 => processWhile();
parser.endWhile          = _                 => endWhile();
parser.setFunType        = TYPE              => setFunType(TYPE);
parser.deleteFunction    = _                 => deleteFunction();
parser.setFunParams      = _                 => setFunParams();
parser.setParams         = ID                => setParams(ID);
parser.setParamsType     = TYPE              => setParamsType(TYPE);                   
parser.checkProcedure    = ID                => checkProcedure(ID);
parser.genERA            = _                 => genERA();
parser.getArgument       = _                 => getArgument();
parser.nextArgument      = _                 => nextArgument();
parser.genGOSUB          = _                 => genGOSUB();
parser.processReadLine   = ID                => processReadLine(ID);
parser.processPrint      = _                 => processPrint();
parser.setMain           = _                 => setMain();/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var parser = yy.parser;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 13;
break;
case 2:/* ignore comment */;
break;
case 3:/* IGNORE */
break;
case 4:return 30;
break;
case 5:return 10;
break;
case 6:return 38;
break;
case 7:return 56;
break;
case 8:return 118;
break;
case 9:return 122;
break;
case 10:return 126;
break;
case 11:return 128;
break;
case 12:return 127;
break;
case 13:return 117;
break;
case 14:return 116;
break;
case 15:return 'THIS';
break;
case 16:return 'NEW';
break;
case 17:return 17;
break;
case 18:return 42;
break;
case 19:return 43;
break;
case 20:return 45;
break;
case 21:return 44;
break;
case 22:return 38;
break;
case 23:return 108;
break;
case 24:return "FALSE";
break;
case 25:return 'NULL';
break;
case 26:return 'NAN';
break;
case 27:return 48;
break;
case 28:return 47;
break;
case 29:return 149;                     
break;
case 30:return 150;
break;
case 31:return 152;
break;
case 32:return 151; 
break;
case 33:return 153; 
break;
case 34:return 154;
break;
case 35:return 155;
break;
case 36:return 156;
break;
case 37:return 157;
break;
case 38:return 158;
break;
case 39:return 159;
break;
case 40:return 160;
break;
case 41:return 161;
break;
case 42:return 162;
break;
case 43:return 'DBINOMIAL';
break;
case 44:return 164;
break;
case 45:return 166;
break;
case 46:return 86;
break;
case 47:return 85;
break;
case 48:return 84
break;
case 49:return 83
break;
case 50:return 80;
break;
case 51:return 82;
break;
case 52:return 79;
break;
case 53:return 81;
break;
case 54:return 16;
break;
case 55:return 106;
break;
case 56:return 28;
break;
case 57:return 107;
break;
case 58:return 'CTEB';
break;
case 59:return 68;
break;
case 60:return 95;
break;
case 61:return 94;
break;
case 62:return 100;
break;
case 63:return 102;  
break;
case 64:return 101;
break;
case 65:return 88;
break;
case 66:return 87;
break;
case 67:return 'NOT';
break;
case 68:return 27
break;
case 69:return 29
break;
case 70:return 49;
break;
case 71:return 51;
break;
case 72:return 32;
break;
case 73:return 34;
break;
case 74:return 'DOT';
break;
case 75:return 24;
break;
case 76:return 7;
break;
case 77:return 21;
break;
case 78:/* skip whitespace */;
break;
case 79:/* skip EOL */;
break;
case 80:/* skip tab */;
break;
case 81:throw 'Illegal character';
break;
case 82:return 15;
break;
}
},
rules: [/^(?:program\b)/,/^(?:end\b)/,/^(?:\/\/.*\n)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:function\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:foreach\b)/,/^(?:while\b)/,/^(?:in\b)/,/^(?:print\b)/,/^(?:readline\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:nan\b)/,/^(?:dataset\b)/,/^(?:vector\b)/,/^(?:rbind\b)/,/^(?:cbind\b)/,/^(?:setNames\b)/,/^(?:getNames\b)/,/^(?:row\b)/,/^(?:col\b)/,/^(?:head\b)/,/^(?:tail\b)/,/^(?:stdev\b)/,/^(?:range\b)/,/^(?:min\b)/,/^(?:max\b)/,/^(?:variance\b)/,/^(?:dnorm\b)/,/^(?:dbinomial\b)/,/^(?:duniform\b)/,/^(?:plot\b)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:([0-9]+(\.[0-9]+)?)f\b)/,/^(?:([0-9])+)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:true|false\b)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}