/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,32],$V1=[2,7],$V2=[1,8],$V3=[2,22],$V4=[1,10],$V5=[2,13],$V6=[1,16],$V7=[7,24],$V8=[10,16,32,51,55,116,117,118,126,128,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,36],$Ve=[1,40],$Vf=[24,26,36,49],$Vg=[1,85],$Vh=[2,40],$Vi=[1,55],$Vj=[1,61],$Vk=[1,60],$Vl=[1,57],$Vm=[1,83],$Vn=[1,84],$Vo=[1,79],$Vp=[1,86],$Vq=[1,87],$Vr=[1,89],$Vs=[1,88],$Vt=[1,90],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[16,51,55,116,117,118,126,128,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165],$VG=[1,123],$VH=[1,115],$VI=[1,119],$VJ=[1,118],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[16,30,34,36,94,95,106,107,108,109],$VP=[24,26,31,36,65,79,80,81,82,83,84,85,86,87,88,94,95,100,101,102],$VQ=[1,158],$VR=[24,26,31,36,79,80,81,82,83,84,85,86,87,88,94,95],$VS=[24,26,31,36,79,80,81,82,83,84,85,86,87,88,94,95,100,101,102],$VT=[16,30,106,107,108,109],$VU=[1,198],$VV=[24,36],$VW=[24,26,31,36,79,80,81,82,83,84,85,86,87,88],$VX=[26,36,87,88],$VY=[2,116],$VZ=[2,41],$V_=[16,30,34,94,95,106,107,108,109],$V$=[26,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROGRAM":4,"p1":5,"p2":6,"COLON":7,"var":8,"modules":9,"MAIN":10,"p4":11,"block":12,"END":13,"p3":14,"EOF":15,"ID":16,"VAR":17,"var-recursive":18,"var-follow":19,"var-types":20,"v3":21,"v4":22,"v5":23,"COMMA":24,"v2":25,"SEMICOLON":26,"new-structure":27,"type":28,"LBRACKET":29,"CTEI":30,"RBRACKET":31,"FUNCTION":32,"module1":33,"LPAREN":34,"params":35,"RPAREN":36,"module4":37,"block-vars":38,"module6":39,"module-type":40,"VOID":41,"module2":42,"module3":43,"params-recursive":44,"INT":45,"FLOAT":46,"BOOL":47,"STRING":48,"LBRACE":49,"block-inside":50,"RBRACE":51,"module5":52,"statement":53,"return-statement":54,"RETURN":55,"exp":56,"assignation":57,"condition":58,"cycle":59,"print":60,"read":61,"call":62,"native-functions":63,"assignation-destination":64,"ASSIGN":65,"and-or-expression":66,"id":67,"array":68,"matrix":69,"expression":70,"exp2":71,"expression-recursive":72,"exp1":73,"expression-op":74,"hexp2":75,"and-or-expression-recursive":76,"hexp1":77,"and-or-expression-op":78,"GREATER":79,"GREATER_EQUAL":80,"LESSER":81,"LESSER_EQUAL":82,"DIFF":83,"DEEP_DIFF":84,"EQUAL":85,"DEEP_EQUAL":86,"AND":87,"OR":88,"term":89,"e2":90,"exp-recursive":91,"e1":92,"exp-op":93,"MINUS":94,"PLUS":95,"factor":96,"t2":97,"term-recursive":98,"term-op":99,"TIMES":100,"REST":101,"DIVIDE":102,"t1":103,"factor-op":104,"var-cte":105,"CTEF":106,"CTES":107,"TRUE":108,"FALSE":109,"call1":110,"call2":111,"call-exp":112,"call5":113,"call3":114,"call4":115,"READLINE":116,"PRINT":117,"IF":118,"cond1":119,"condition-else":120,"cond2":121,"ELSE":122,"cond3":123,"cycle-for":124,"cycle-while":125,"FOREACH":126,"IN":127,"WHILE":128,"while1":129,"while2":130,"while3":131,"rbind":132,"cbind":133,"setNames":134,"getNames":135,"row":136,"col":137,"head":138,"tail":139,"stdev":140,"range":141,"min":142,"max":143,"variance":144,"dnorm":145,"dbinomial":146,"duniform":147,"plot":148,"RBIND":149,"CBIND":150,"GETNAMES":151,"SETNAMES":152,"VECTOR":153,"ROW":154,"COL":155,"HEAD":156,"TAIL":157,"STDEV":158,"RANGE":159,"MIN":160,"MAX":161,"VARIANCE":162,"DNORM":163,"DBINOMAIL":164,"DUNIFORM":165,"barPlot":166,"PLOT":167,"linePlot":168,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",7:"COLON",10:"MAIN",13:"END",15:"EOF",16:"ID",17:"VAR",24:"COMMA",26:"SEMICOLON",27:"new-structure",29:"LBRACKET",30:"CTEI",31:"RBRACKET",32:"FUNCTION",34:"LPAREN",36:"RPAREN",41:"VOID",45:"INT",46:"FLOAT",47:"BOOL",48:"STRING",49:"LBRACE",51:"RBRACE",55:"RETURN",65:"ASSIGN",79:"GREATER",80:"GREATER_EQUAL",81:"LESSER",82:"LESSER_EQUAL",83:"DIFF",84:"DEEP_DIFF",85:"EQUAL",86:"DEEP_EQUAL",87:"AND",88:"OR",94:"MINUS",95:"PLUS",100:"TIMES",101:"REST",102:"DIVIDE",106:"CTEF",107:"CTES",108:"TRUE",109:"FALSE",116:"READLINE",117:"PRINT",118:"IF",122:"ELSE",126:"FOREACH",127:"IN",128:"WHILE",148:"plot",149:"RBIND",150:"CBIND",151:"GETNAMES",152:"SETNAMES",153:"VECTOR",154:"ROW",155:"COL",156:"HEAD",157:"TAIL",158:"STDEV",159:"RANGE",160:"MIN",161:"MAX",162:"VARIANCE",163:"DNORM",164:"DBINOMAIL",165:"DUNIFORM",167:"PLOT"},
productions_: [0,[3,12],[5,0],[6,1],[14,0],[11,0],[8,3],[8,0],[20,1],[20,1],[20,1],[18,1],[18,3],[18,0],[19,4],[19,4],[25,1],[21,1],[22,4],[23,7],[9,10],[9,9],[9,0],[40,1],[40,1],[35,4],[44,2],[44,0],[33,1],[42,1],[43,1],[37,1],[28,1],[28,1],[28,1],[28,1],[12,3],[38,5],[50,2],[50,1],[50,0],[39,0],[52,0],[54,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,2],[53,1],[57,4],[64,1],[64,1],[64,1],[70,3],[72,2],[72,0],[73,1],[71,0],[66,3],[76,2],[76,0],[77,1],[75,0],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[78,1],[78,1],[56,3],[91,2],[91,0],[93,1],[93,1],[92,1],[90,0],[89,3],[99,1],[99,1],[99,1],[98,2],[98,0],[103,1],[97,0],[96,3],[96,2],[96,1],[104,1],[104,1],[104,0],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[67,1],[68,4],[69,7],[62,5],[62,4],[112,5],[112,2],[110,2],[111,0],[114,0],[115,0],[113,0],[61,7],[60,5],[58,8],[120,3],[120,0],[119,0],[121,0],[123,0],[59,1],[59,1],[124,7],[125,8],[129,0],[130,0],[131,0],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[132,7],[133,9],[135,4],[134,6],[136,6],[137,6],[138,6],[139,6],[140,4],[141,4],[142,4],[143,4],[144,4],[145,8],[146,8],[147,8],[166,4],[168,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 yy.parser.createDir() 
break;
case 3:
 yy.parser.setName($$[$0]) 
break;
case 4:
 yy.parser.deleteDir() 
break;
case 5:
 yy.parser.setMain() 
break;
case 16:
 yy.parser.setType($$[$0]) 
break;
case 17:
 yy.parser.setVars($$[$0]); 
break;
case 18:
 yy.parser.setArr($$[$0-3], $$[$0-1]); 
break;
case 19:
 yy.parser.setMat($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 28:
 yy.parser.setTable($$[$0]) 
break;
case 29:
 yy.parser.setParams($$[$0]) 
break;
case 30:
 yy.parser.setParamsType($$[$0])
break;
case 31:
 yy.parser.setFunType($$[$0])
break;
case 41:
 yy.parser.deleteFunction(); 
break;
case 42:
 yy.parser.setFunParams()
break;
case 43:
 yy.parser.processReturn()
break;
case 51:
yy.parser.processAssign($$[$0-3])
break;
case 58: case 63: case 80: case 88:
 yy.parser.poperPush($$[$0]) 
break;
case 59:
yy.parser.processExp()
break;
case 64:
yy.parser.processHypExp()
break;
case 81:
yy.parser.processTerm()
break;
case 89:
yy.parser.processFactor()
break;
case 99:
yy.parser.pushConst($$[$0],'int')
break;
case 100:
yy.parser.pushConst($$[$0],'float')
break;
case 101:
yy.parser.pushConst($$[$0],'string')
break;
case 102:
yy.parser.pushConst($$[$0],'bool')
break;
case 103:
yy.parser.pushConst($$[$0], 'bool')
break;
case 105:
yy.parser.pushVar($$[$0])
break;
case 106:
 yy.parser.pushArr($$[$0-3]) 
break;
case 107:
yy.parser.pushMat($$[$0-6])
break;
case 112:
 yy.parser.checkProcedure($$[$0-1]) 
break;
case 113:
 yy.parser.genERA() 
break;
case 114:
 yy.parser.getArgument() 
break;
case 115:
 yy.parser.nextArgument() 
break;
case 116:
 yy.parser.genGOSUB() 
break;
case 117:
 yy.parser.processReadLine($$[$0-2]) 
break;
case 118:
 yy.parser.processPrint() 
break;
case 122:
yy.parser.processCond()
break;
case 123:
yy.parser.endCond()
break;
case 124:
yy.parser.processElse()
break;
case 129:
 yy.parser.pushJump()
break;
case 130:
 yy.parser.processWhile()
break;
case 131:
 yy.parser.endWhile()
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,16:[2,2]},{6:4,16:[1,5]},{7:[1,6]},{7:[2,3]},o($V0,$V1,{8:7,17:$V2}),{9:9,10:$V3,32:$V4},{7:$V5,16:$V6,18:11,20:12,21:13,22:14,23:15},{10:[1,17]},{16:[1,19],33:18},{7:[1,21],19:20},{7:[2,11],24:[1,22]},o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,17],{29:[1,23]}),{11:24,49:[2,5]},{34:[1,25]},{34:[2,28]},o($V8,[2,6]),{25:26,27:[1,27],28:28,45:$V9,46:$Va,47:$Vb,48:$Vc},{7:$V5,16:$V6,18:33,20:12,21:13,22:14,23:15},{30:[1,34]},{12:35,49:$Vd},{16:$Ve,35:37,36:[1,38],42:39},{26:[1,41]},{26:[1,42]},{26:[2,16]},o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,35]),{7:[2,12]},{31:[1,43]},{13:[1,44]},{16:$Vg,50:45,51:$Vh,53:46,54:47,55:$Vi,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:56,67:80,68:81,69:82,110:62,116:$Vj,117:$Vk,118:$Vl,124:58,125:59,126:$Vm,128:$Vn,132:63,133:64,134:65,135:66,136:67,137:68,138:69,139:70,140:71,141:72,142:73,143:74,144:75,145:76,146:77,147:78,148:$Vo,149:$Vp,150:$Vq,151:$Vr,152:$Vs,154:$Vt,155:$Vu,156:$Vv,157:$Vw,158:$Vx,159:$Vy,160:$Vz,161:$VA,162:$VB,163:$VC,164:$VD,165:$VE},{36:[1,102]},{7:[1,103]},{7:[1,104]},{7:[2,29]},o($V8,$V1,{8:105,17:$V2}),o($V8,$V1,{8:106,17:$V2}),o($V7,[2,18],{29:[1,107]}),{14:108,15:[2,4]},{51:[1,109]},{16:$Vg,50:110,51:$Vh,53:46,54:47,55:$Vi,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:56,67:80,68:81,69:82,110:62,116:$Vj,117:$Vk,118:$Vl,124:58,125:59,126:$Vm,128:$Vn,132:63,133:64,134:65,135:66,136:67,137:68,138:69,139:70,140:71,141:72,142:73,143:74,144:75,145:76,146:77,147:78,148:$Vo,149:$Vp,150:$Vq,151:$Vr,152:$Vs,154:$Vt,155:$Vu,156:$Vv,157:$Vw,158:$Vx,159:$Vy,160:$Vz,161:$VA,162:$VB,163:$VC,164:$VD,165:$VE},{51:[2,39]},o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),{26:[1,111]},o($VF,[2,50]),{16:$Vg,30:$VG,34:$VH,56:112,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{65:[1,129]},{34:[1,130]},o($VF,[2,125]),o($VF,[2,126]),{34:[1,131]},{34:[1,132]},o($VO,[2,113],{111:133}),o($VF,[2,132]),o($VF,[2,133]),o($VF,[2,134]),o($VF,[2,135]),o($VF,[2,136]),o($VF,[2,137]),o($VF,[2,138]),o($VF,[2,139]),o($VF,[2,140]),o($VF,[2,141]),o($VF,[2,142]),o($VF,[2,143]),o($VF,[2,144]),o($VF,[2,145]),o($VF,[2,146]),o($VF,[2,147]),o($VF,[2,148]),{65:[2,52]},{65:[2,53]},{65:[2,54]},{34:[1,134]},{34:[2,129],129:135},o($VP,[2,105],{29:[1,137],34:[1,136]}),{34:[1,138]},{34:[1,139]},{34:[1,140]},{34:[1,141]},{34:[1,142]},{34:[1,143]},{34:[1,144]},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{34:[1,149]},{34:[1,150]},{34:[1,151]},{34:[1,152]},{34:[1,153]},{7:[1,154]},{28:157,37:155,40:156,41:$VQ,45:$V9,46:$Va,47:$Vb,48:$Vc},{28:160,43:159,45:$V9,46:$Va,47:$Vb,48:$Vc},o($V8,[2,14]),o($V8,[2,15]),{30:[1,161]},{15:[1,162]},o([13,16,51,55,116,117,118,122,126,128,148,149,150,151,152,154,155,156,157,158,159,160,161,162,163,164,165],[2,36]),{51:[2,38]},o($VF,[2,49]),{26:[1,163]},o($VR,[2,81],{90:164}),o($VS,[2,89],{97:165}),{16:$Vg,30:$VG,34:$VH,56:167,62:128,67:120,68:121,69:122,70:166,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,62:128,67:120,68:121,69:122,105:168,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($VS,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),{16:$Vg,30:$VG,34:$VH,56:167,62:128,66:169,67:120,68:121,69:122,70:170,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:167,62:128,66:171,67:120,68:121,69:122,70:170,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:172,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:173,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,36:[1,175],56:176,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62,112:174},{16:[1,177]},{34:[1,178]},o($VO,[2,112]),{16:$Vg,30:$VG,34:$VH,56:179,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:[1,180]},{16:[1,181]},{16:[1,182]},{16:[1,183]},{16:[1,184]},{16:[1,185]},{16:[1,186]},{16:[1,187]},{16:[1,188]},{16:[1,189]},{16:[1,190]},{16:[1,191]},{16:[1,192]},{16:$Vg,30:$VG,34:$VH,56:193,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:194,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:195,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{28:157,37:196,40:156,41:$VQ,45:$V9,46:$Va,47:$Vb,48:$Vc},{38:197,49:$VU},{49:[2,31]},{49:[2,23]},{49:[2,24]},{24:[1,200],36:[2,27],44:199},o($VV,[2,30]),{31:[1,201]},{1:[2,1]},{51:[2,43]},o($VW,[2,77],{91:202,92:203,93:204,94:[1,205],95:[1,206]}),o($VR,[2,87],{98:207,103:208,99:209,100:[1,210],101:[1,211],102:[1,212]}),{36:[1,213]},o([26,36,79,80,81,82,83,84,85,86,87,88],[2,59],{71:214}),o($VS,[2,91]),{26:[1,215]},o($VX,[2,64],{75:216}),{36:[1,217]},{36:[1,218]},{24:[1,219]},{36:[1,220]},o($VS,$VY,{113:221}),o($VV,[2,114],{114:222}),{127:[1,223]},{16:$Vg,30:$VG,34:$VH,56:167,62:128,66:224,67:120,68:121,69:122,70:170,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{31:[1,225]},{24:[1,226]},{24:[1,227]},{24:[1,228]},{36:[1,229]},{24:[1,230]},{24:[1,231]},{24:[1,232]},{24:[1,233]},{36:[1,234]},{36:[1,235]},{36:[1,236]},{36:[1,237]},{36:[1,238]},{24:[1,239]},{24:[1,240]},{24:[1,241]},{38:242,49:$VU},o($V0,$VZ,{39:243}),o($VF,$V1,{8:244,17:$V2}),{36:[2,25]},{16:$Ve,35:245,42:39},o($V7,[2,19]),o($VW,[2,75]),{16:$Vg,30:$VG,34:$VH,56:246,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($V_,[2,80]),o($V_,[2,78]),o($V_,[2,79]),o($VR,[2,82]),{16:$Vg,30:$VG,34:$VH,62:128,67:120,68:121,69:122,89:247,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($V_,[2,88]),o($V_,[2,83]),o($V_,[2,84]),o($V_,[2,85]),o($VS,[2,90]),o($VX,[2,57],{72:248,73:249,74:250,79:[1,251],80:[1,252],81:[1,253],82:[1,254],83:[1,255],84:[1,256],85:[1,257],86:[1,258]}),o($VF,[2,51]),o($V$,[2,62],{76:259,77:260,78:261,87:[1,262],88:[1,263]}),{49:[2,122],119:264},{26:[1,265]},{16:[1,266]},o($VS,$VY,{113:267}),o($VS,[2,109]),{24:[1,268],36:[2,111]},{16:[1,269]},{36:[1,270]},o($VP,[2,106],{29:[1,271]}),{16:[1,272]},{16:[1,273]},{153:[1,274]},o($VF,[2,151]),{16:$Vg,30:$VG,34:$VH,56:275,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:276,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:277,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:278,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($VF,[2,157]),o($VF,[2,158]),o($VF,[2,159]),o($VF,[2,160]),o($VF,[2,161]),{16:$Vg,30:$VG,34:$VH,56:279,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:280,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:281,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($V0,$VZ,{39:282}),{9:283,10:$V3,32:$V4},o($VF,[2,42],{52:284}),{36:[2,26]},o($VW,[2,76]),o($VR,[2,86]),o($VX,[2,55]),{16:$Vg,30:$VG,34:$VH,56:167,62:128,67:120,68:121,69:122,70:285,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($V_,[2,58]),o($V_,[2,65]),o($V_,[2,66]),o($V_,[2,67]),o($V_,[2,68]),o($V_,[2,69]),o($V_,[2,70]),o($V_,[2,71]),o($V_,[2,72]),o($V$,[2,60]),{16:$Vg,30:$VG,34:$VH,56:167,62:128,66:286,67:120,68:121,69:122,70:170,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($V_,[2,63]),o($V_,[2,73]),o($V_,[2,74]),{12:287,49:$Vd},o($VF,[2,118]),{36:[1,288]},o($VS,[2,108]),o($V_,[2,115],{115:289}),{36:[1,290]},{49:[2,130],130:291},{16:$Vg,30:$VG,34:$VH,56:292,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{36:[1,293]},{24:[1,294]},{36:[1,295]},{36:[1,296]},{36:[1,297]},{36:[1,298]},{36:[1,299]},{24:[1,300]},{24:[1,301]},{24:[1,302]},{9:303,10:$V3,32:$V4},{10:[2,21]},{16:$Vg,50:304,51:$Vh,53:46,54:47,55:$Vi,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:56,67:80,68:81,69:82,110:62,116:$Vj,117:$Vk,118:$Vl,124:58,125:59,126:$Vm,128:$Vn,132:63,133:64,134:65,135:66,136:67,137:68,138:69,139:70,140:71,141:72,142:73,143:74,144:75,145:76,146:77,147:78,148:$Vo,149:$Vp,150:$Vq,151:$Vr,152:$Vs,154:$Vt,155:$Vu,156:$Vv,157:$Vw,158:$Vx,159:$Vy,160:$Vz,161:$VA,162:$VB,163:$VC,164:$VD,165:$VE},o($VX,[2,56]),o($V$,[2,61]),o($VF,[2,121],{120:305,122:[1,306]}),{26:[1,307]},{16:$Vg,30:$VG,34:$VH,56:176,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62,112:308},{12:309,49:$Vd},{12:310,49:$Vd},{31:[1,311]},{26:[1,312]},{16:$Vg,30:$VG,34:$VH,56:313,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},o($VF,[2,152]),o($VF,[2,153]),o($VF,[2,154]),o($VF,[2,155]),o($VF,[2,156]),{16:$Vg,30:$VG,34:$VH,56:314,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:315,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{16:$Vg,30:$VG,34:$VH,56:316,62:128,67:120,68:121,69:122,89:113,94:$VI,95:$VJ,96:114,104:116,105:117,106:$VK,107:$VL,108:$VM,109:$VN,110:62},{10:[2,20]},{51:[1,317]},o($VF,[2,123],{121:318}),{49:[2,124],123:319},o($VF,[2,117]),{36:[2,110]},o($VF,[2,127]),o($VF,[2,131],{131:320}),o($VP,[2,107]),o($VF,[2,149]),{36:[1,321]},{36:[1,322]},{36:[1,323]},{36:[1,324]},o($V0,[2,37]),o($VF,[2,119]),{12:325,49:$Vd},o($VF,[2,128]),{26:[1,326]},o($VF,[2,162]),o($VF,[2,163]),o($VF,[2,164]),o($VF,[2,120]),o($VF,[2,150])],
defaultActions: {5:[2,3],19:[2,28],28:[2,16],33:[2,12],40:[2,29],47:[2,39],80:[2,52],81:[2,53],82:[2,54],110:[2,38],156:[2,31],157:[2,23],158:[2,24],162:[2,1],163:[2,43],199:[2,25],245:[2,26],283:[2,21],303:[2,20],308:[2,110]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var actions = require('./actions');
const { 
  createDir, deleteDir, setName,
  setVars, setType, setTable,
  pushVar, pushConst, poperPush,
  pushArr, pushMat,
  processTerm, processAssign, processFactor, 
  processExp, processHypExp, 
  processCond, endCond, processElse,
  pushJump, processWhile, endWhile,
  deleteFunction, setFunType, setFunParams,
  setParams, setParamsType, setMain,
  checkProcedure, genERA, getArgument, nextArgument, genGOSUB
} = actions;

parser.createDir         = _                 => createDir();
parser.setName           = NAME              => setName(NAME);
parser.deleteDir         = _                 => deleteDir();
parser.setVars           = ID                => setVars(ID);
parser.setType           = TYPE              => setType(TYPE);
parser.setTable          = ID                => setTable(ID);
parser.pushVar           = ID                => pushVar(ID);
parser.pushArr           = ID                => pushArr(ID);
parser.pushMat           = ID                => pushMat(ID);
parser.pushConst         = (DATA, TYPE)      => pushConst(DATA, TYPE);
parser.poperPush         = OP                => poperPush(OP);
parser.processTerm       = _                 => processTerm();
parser.processFactor     = _                 => processFactor();
parser.processAssign     = ID                => processAssign(ID);
parser.processExp        = _                 => processExp();
parser.processHypExp     = _                 => processHypExp();
parser.processCond       = _                 => processCond();
parser.endCond           = _                 => endCond();
parser.processElse       = _                 => processElse();
parser.pushJump          = _                 => pushJump();
parser.processWhile      = _                 => processWhile();
parser.endWhile          = _                 => endWhile();
parser.setFunType        = TYPE              => setFunType(TYPE);
parser.deleteFunction    = _                 => deleteFunction();
parser.setFunParams      = _                 => setFunParams();
parser.setParams         = ID                => setParams(ID);
parser.setParamsType     = TYPE              => setParamsType(TYPE);                   
parser.checkProcedure    = ID                => checkProcedure(ID);
parser.genERA            = _                 => genERA();
parser.getArgument       = _                 => getArgument();
parser.nextArgument      = _                 => nextArgument();
parser.genGOSUB          = _                 => genGOSUB();
parser.processReadLine   = ID                => processReadLine(ID);
parser.processPrint      = _                 => processPrint();
parser.setMain           = _                 => setMain();
parser.setArr            = (ID, S1)          => setArr(ID, S1);
parser.setMat            = (ID, S1, S2)      => setMat(ID, S1, S2);
parser.processReturn     = _                 => processReturn();/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var parser = yy.parser;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 13;
break;
case 2:/* ignore comment */;
break;
case 3:/* IGNORE */
break;
case 4:return 32;
break;
case 5:return 10;
break;
case 6:return 41;
break;
case 7:return 55;
break;
case 8:return 118;
break;
case 9:return 122;
break;
case 10:return 126;
break;
case 11:return 128;
break;
case 12:return 127;
break;
case 13:return 117;
break;
case 14:return 116;
break;
case 15:return 'THIS';
break;
case 16:return 'NEW';
break;
case 17:return 17;
break;
case 18:return 45;
break;
case 19:return 46;
break;
case 20:return 48;
break;
case 21:return 47;
break;
case 22:return 41;
break;
case 23:return 108;
break;
case 24:return "FALSE";
break;
case 25:return 'NULL';
break;
case 26:return 'NAN';
break;
case 27:return 'DATASET';
break;
case 28:return 153;
break;
case 29:return 149;                     
break;
case 30:return 150;
break;
case 31:return 152;
break;
case 32:return 151; 
break;
case 33:return 154; 
break;
case 34:return 155;
break;
case 35:return 156;
break;
case 36:return 157;
break;
case 37:return 158;
break;
case 38:return 159;
break;
case 39:return 160;
break;
case 40:return 161;
break;
case 41:return 162;
break;
case 42:return 163;
break;
case 43:return 'DBINOMIAL';
break;
case 44:return 165;
break;
case 45:return 167;
break;
case 46:return 86;
break;
case 47:return 85;
break;
case 48:return 84
break;
case 49:return 83
break;
case 50:return 80;
break;
case 51:return 82;
break;
case 52:return 79;
break;
case 53:return 81;
break;
case 54:return 16;
break;
case 55:return 106;
break;
case 56:return 30;
break;
case 57:return 107;
break;
case 58:return 'CTEB';
break;
case 59:return 65;
break;
case 60:return 95;
break;
case 61:return 94;
break;
case 62:return 100;
break;
case 63:return 102;  
break;
case 64:return 101;
break;
case 65:return 88;
break;
case 66:return 87;
break;
case 67:return 'NOT';
break;
case 68:return 29
break;
case 69:return 31
break;
case 70:return 49;
break;
case 71:return 51;
break;
case 72:return 34;
break;
case 73:return 36;
break;
case 74:return 'DOT';
break;
case 75:return 26;
break;
case 76:return 7;
break;
case 77:return 24;
break;
case 78:/* skip whitespace */;
break;
case 79:/* skip EOL */;
break;
case 80:/* skip tab */;
break;
case 81:throw 'Illegal character';
break;
case 82:return 15;
break;
}
},
rules: [/^(?:program\b)/,/^(?:end\b)/,/^(?:\/\/.*\n)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:function\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:foreach\b)/,/^(?:while\b)/,/^(?:in\b)/,/^(?:print\b)/,/^(?:readline\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:nan\b)/,/^(?:dataset\b)/,/^(?:vector\b)/,/^(?:rbind\b)/,/^(?:cbind\b)/,/^(?:setNames\b)/,/^(?:getNames\b)/,/^(?:row\b)/,/^(?:col\b)/,/^(?:head\b)/,/^(?:tail\b)/,/^(?:stdev\b)/,/^(?:range\b)/,/^(?:min\b)/,/^(?:max\b)/,/^(?:variance\b)/,/^(?:dnorm\b)/,/^(?:dbinomial\b)/,/^(?:duniform\b)/,/^(?:plot\b)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:([0-9]+(\.[0-9]+)?)f\b)/,/^(?:([0-9])+)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:true|false\b)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}