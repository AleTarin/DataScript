/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,6],$V1=[1,8],$V2=[2,21],$V3=[1,10],$V4=[2,9],$V5=[1,16],$V6=[1,18],$V7=[1,26],$V8=[2,26],$V9=[10,15,33,46,49,102,103,104,109,111],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,49],$Vf=[2,35],$Vg=[1,48],$Vh=[1,54],$Vi=[1,53],$Vj=[1,50],$Vk=[1,55],$Vl=[1,56],$Vm=[2,16],$Vn=[1,60],$Vo=[21,24,27,36,44],$Vp=[15,24,46,49,102,103,104,109,111],$Vq=[1,69],$Vr=[1,68],$Vs=[1,92],$Vt=[1,93],$Vu=[1,87],$Vv=[1,98],$Vw=[1,91],$Vx=[1,90],$Vy=[1,94],$Vz=[1,95],$VA=[24,36,80,81],$VB=[21,24,29,36,72,73,74,75,76,77,78,79,80,81,87,88],$VC=[21,24,29,36,72,73,74,75,76,77,78,79,80,81,87,88,94,95,96],$VD=[15,28,44,99,100],$VE=[21,24,36],$VF=[24,36],$VG=[21,24,29,36,72,73,74,75,76,77,78,79,80,81],$VH=[21,46],$VI=[21,24,29,36,60,72,73,74,75,76,77,78,79,80,81,87,88,94,95,96],$VJ=[1,170],$VK=[15,28,34,44,87,88,99,100];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROGRAM":4,"p1":5,"p2":6,"COLON":7,"var":8,"modules":9,"MAIN":10,"block-vars":11,"END":12,"p3":13,"EOF":14,"ID":15,"VAR":16,"v1":17,"var-recursive":18,"var-follow":19,"v3":20,"COMMA":21,"v2":22,"var-index":23,"SEMICOLON":24,"new-structure":25,"type":26,"LBRACKET":27,"CTEI":28,"RBRACKET":29,"structures":30,"VECTOR":31,"DATASET":32,"FUNCTION":33,"LPAREN":34,"params":35,"RPAREN":36,"module-type":37,"VOID":38,"INT":39,"FLOAT":40,"BOOL":41,"STRING":42,"block":43,"LBRACE":44,"block-inside":45,"RBRACE":46,"statement":47,"return-statement":48,"RETURN":49,"array":50,"array-item":51,"expr":52,"assignation":53,"condition":54,"cycle":55,"write":56,"read":57,"call":58,"var-cte-exp":59,"ASSIGN":60,"and-or-expression":61,"expression":62,"exp":63,"exp2":64,"expression-recursive":65,"exp1":66,"expression-op":67,"hexp2":68,"and-or-expression-recursive":69,"hexp1":70,"and-or-expression-op":71,"GREATER":72,"GREATER_EQUAL":73,"LESSER":74,"LESSER_EQUAL":75,"DIFF":76,"DEEP_DIFF":77,"EQUAL":78,"DEEP_EQUAL":79,"AND":80,"OR":81,"term":82,"e2":83,"exp-recursive":84,"e1":85,"exp-op":86,"MINUS":87,"PLUS":88,"factor":89,"t2":90,"term-recursive":91,"t1":92,"term-op":93,"TIMES":94,"REST":95,"DIVIDE":96,"factor-op":97,"var-cte":98,"CTEF":99,"CTES":100,"call-exp":101,"READLINE":102,"PRINT":103,"IF":104,"condition-else":105,"ELSE":106,"cycle-for":107,"cycle-while":108,"FOREACH":109,"IN":110,"WHILE":111,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",7:"COLON",10:"MAIN",12:"END",14:"EOF",15:"ID",16:"VAR",21:"COMMA",24:"SEMICOLON",27:"LBRACKET",28:"CTEI",29:"RBRACKET",31:"VECTOR",32:"DATASET",33:"FUNCTION",34:"LPAREN",36:"RPAREN",38:"VOID",39:"INT",40:"FLOAT",41:"BOOL",42:"STRING",44:"LBRACE",46:"RBRACE",49:"RETURN",52:"expr",60:"ASSIGN",72:"GREATER",73:"GREATER_EQUAL",74:"LESSER",75:"LESSER_EQUAL",76:"DIFF",77:"DEEP_DIFF",78:"EQUAL",79:"DEEP_EQUAL",80:"AND",81:"OR",87:"MINUS",88:"PLUS",94:"TIMES",95:"REST",96:"DIVIDE",99:"CTEF",100:"CTES",102:"READLINE",103:"PRINT",104:"IF",106:"ELSE",109:"FOREACH",110:"IN",111:"WHILE"},
productions_: [0,[3,11],[5,0],[6,1],[13,0],[8,4],[8,0],[18,1],[18,3],[18,0],[19,5],[19,4],[17,0],[22,1],[20,1],[23,4],[23,0],[25,1],[30,1],[30,1],[9,9],[9,0],[37,1],[37,1],[35,4],[35,6],[35,0],[26,1],[26,1],[26,1],[26,1],[43,3],[11,4],[45,2],[45,1],[45,0],[48,3],[50,3],[51,3],[51,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[53,5],[53,4],[62,3],[65,2],[65,0],[66,1],[64,0],[61,3],[69,2],[69,0],[70,1],[68,0],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[71,1],[71,1],[63,3],[84,2],[84,0],[86,1],[86,1],[85,1],[83,0],[82,3],[91,2],[91,0],[92,1],[90,0],[93,1],[93,1],[93,1],[89,3],[89,2],[89,1],[97,1],[97,1],[97,0],[98,2],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[59,4],[59,0],[58,5],[101,3],[101,1],[57,7],[56,5],[54,6],[105,2],[105,0],[55,1],[55,1],[107,7],[108,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 yy.parser.createDir() 
break;
case 3:
 yy.parser.setName($$[$0]) 
break;
case 4:
 yy.parser.deleteDir() 
break;
case 12:
 yy.parser.setTable() 
break;
case 13: case 17:
 yy.parser.setType($$[$0]) 
break;
case 14:
 yy.parser.setVars($$[$0]); 
break;
case 37:
 this.$  = [$$[$0-1]]; 
break;
case 38:
 this.$ = $$[$0-2] + ',' + $$[$0] 
break;
case 39:
 this.$ = $$[$0] 
break;
case 47:
yy.parser.processAssign($$[$0-3], $$[$0-1])
break;
case 51: case 56: case 73: case 78:
 yy.parser.poperPush($$[$0]) 
break;
case 52:
yy.parser.processExp()
break;
case 57:
yy.parser.processHypExp()
break;
case 74:
yy.parser.processTerm()
break;
case 79:
yy.parser.processFactor()
break;
case 90:
yy.parser.addQuadVar($$[$0])
break;
case 91:
yy.parser.addQuadConst($$[$0],'int')
break;
case 92:
yy.parser.addQuadConst($$[$0],'float')
break;
case 93:
yy.parser.addQuadConst($$[$0],'string')
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,15:[2,2]},{6:4,15:[1,5]},{7:[1,6]},{7:[2,3]},o([10,33],$V0,{8:7,16:$V1}),{9:9,10:$V2,33:$V3},o([7,15],[2,12],{17:11}),{10:[1,12]},{15:[1,13]},{7:$V4,15:$V5,18:14,20:15},{11:17,44:$V6},{34:[1,19]},{7:[1,21],19:20},{7:[2,7],21:[1,22]},o([7,21],[2,14]),{12:[1,23]},o([15,46,49,102,103,104,109,111],$V0,{8:24,16:$V1}),{15:$V7,35:25,36:$V8},o($V9,[2,5]),{22:27,25:28,26:29,30:30,31:[1,35],32:[1,36],39:$Va,40:$Vb,41:$Vc,42:$Vd},{7:$V4,15:$V5,18:37,20:15},{13:38,14:[2,4]},{15:$Ve,45:39,46:$Vf,47:40,48:41,49:$Vg,53:42,54:43,55:44,56:45,57:46,58:47,102:$Vh,103:$Vi,104:$Vj,107:51,108:52,109:$Vk,111:$Vl},{36:[1,57]},{7:[1,58]},{23:59,24:$Vm,27:$Vn},{24:[1,61]},o([24,27],[2,13]),{24:[2,17]},o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),o($Vo,[2,30]),{24:[2,18]},{24:[2,19]},{7:[2,8]},{14:[1,62]},{46:[1,63]},{15:$Ve,45:64,46:$Vf,47:40,48:41,49:$Vg,53:42,54:43,55:44,56:45,57:46,58:47,102:$Vh,103:$Vi,104:$Vj,107:51,108:52,109:$Vk,111:$Vl},{46:[2,34]},o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),{15:$Ve,47:65,53:42,54:43,55:44,56:45,57:46,58:47,102:$Vh,103:$Vi,104:$Vj,107:51,108:52,109:$Vk,111:$Vl},{27:$Vq,34:$Vr,59:66,60:[1,67]},{34:[1,70]},o($Vp,[2,106]),o($Vp,[2,107]),{34:[1,71]},{34:[1,72]},{34:[1,73]},{34:[1,74]},{7:[1,75]},{26:76,39:$Va,40:$Vb,41:$Vc,42:$Vd},{24:[1,77]},{28:[1,78]},o($V9,$V0,{8:79,16:$V1}),{1:[2,1]},o([10,12,33],[2,32]),{46:[2,33]},{24:[1,80]},{60:[1,81]},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,61:82,62:83,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:100,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz,101:99},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:101,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,61:102,62:83,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:103,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:104,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:[1,105]},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,61:106,62:83,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{26:108,37:107,38:[1,109],39:$Va,40:$Vb,41:$Vc,42:$Vd},o([21,36],$Vm,{23:110,27:$Vn}),o($V9,$V0,{8:111,16:$V1}),{29:[1,112]},o($V9,[2,11]),{46:[2,36]},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,61:113,62:83,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{24:[1,114]},o($VA,[2,57],{68:115}),o([24,36,72,73,74,75,76,77,78,79,80,81],[2,52],{64:116}),o($VB,[2,74],{83:117}),o($VC,[2,79],{90:118}),{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,62:119,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},{15:$Vs,28:$Vt,44:$Vv,50:96,58:97,98:120,99:$Vy,100:$Vz},o($VC,[2,85]),o($VD,[2,86]),o($VD,[2,87]),o($VC,[2,90],{59:121,27:$Vq,34:$Vr}),o($VC,[2,91]),o($VC,[2,92]),o($VC,[2,93]),o($VC,[2,94]),o($VC,[2,95]),{51:122,52:[1,123]},{36:[1,124]},{21:[1,125],36:[2,100]},{29:[1,126]},{36:[1,127]},{36:[1,128]},{21:[1,129]},{110:[1,130]},{36:[1,131]},{11:132,44:$V6},{44:[2,22]},{44:[2,23]},{21:[1,133],36:[2,24]},o($V9,[2,10]),o($VE,$Vm,{23:134,27:$Vn}),{24:[1,135]},o($Vp,[2,47]),o($VF,[2,55],{69:136,70:137,71:138,80:[1,139],81:[1,140]}),o($VA,[2,50],{65:141,66:142,67:143,72:[1,144],73:[1,145],74:[1,146],75:[1,147],76:[1,148],77:[1,149],78:[1,150],79:[1,151]}),o($VG,[2,70],{84:152,85:153,86:154,87:[1,155],88:[1,156]}),o($VB,[2,77],{91:157,92:158,93:159,94:[1,160],95:[1,161],96:[1,162]}),{36:[1,163]},o($VC,[2,84]),o($VC,[2,89]),{21:[1,165],46:[1,164]},o($VH,[2,39]),{24:[1,166]},{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:100,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz,101:167},o($VI,[2,97],{59:168,27:$Vq}),{43:169,44:$VJ},{24:[1,171]},{15:[1,172]},{15:[1,173]},{43:174,44:$VJ},{9:175,10:$V2,33:$V3},{15:$V7,35:176,36:$V8},o($VE,[2,15]),o($Vp,[2,46]),o($VF,[2,53]),{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,61:177,62:83,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},o($VK,[2,56]),o($VK,[2,66]),o($VK,[2,67]),o($VA,[2,48]),{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,62:178,63:84,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},o($VK,[2,51]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VG,[2,68]),{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,63:179,82:85,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},o($VK,[2,73]),o($VK,[2,71]),o($VK,[2,72]),o($VB,[2,75]),{15:$Vs,28:$Vt,34:$Vu,44:$Vv,50:96,58:97,82:180,87:$Vw,88:$Vx,89:86,97:88,98:89,99:$Vy,100:$Vz},o($VK,[2,78]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VC,[2,83]),o($VC,[2,37]),{52:[1,181]},o([15,21,24,29,36,46,49,72,73,74,75,76,77,78,79,80,81,87,88,94,95,96,102,103,104,109,111],[2,98]),{36:[2,99]},o($VI,[2,96]),o($Vp,[2,105],{105:182,106:[1,183]}),{15:$Ve,45:184,46:$Vf,47:40,48:41,49:$Vg,53:42,54:43,55:44,56:45,57:46,58:47,102:$Vh,103:$Vi,104:$Vj,107:51,108:52,109:$Vk,111:$Vl},o($Vp,[2,102]),{36:[1,185]},{36:[1,186]},o($Vp,[2,109]),{10:[2,20]},{36:[2,25]},o($VF,[2,54]),o($VA,[2,49]),o($VG,[2,69]),o($VB,[2,76]),o($VH,[2,38]),o($Vp,[2,103]),{43:187,44:$VJ},{46:[1,188]},{24:[1,189]},{43:190,44:$VJ},o($Vp,[2,104]),o([15,24,46,49,102,103,104,106,109,111],[2,31]),o($Vp,[2,101]),o($Vp,[2,108])],
defaultActions: {5:[2,3],30:[2,17],35:[2,18],36:[2,19],37:[2,8],41:[2,34],62:[2,1],64:[2,33],80:[2,36],108:[2,22],109:[2,23],167:[2,99],175:[2,20],176:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var actions = require('./actions');
const { 
  createDir, deleteDir, setName,
  setVars, setType, setTable,
  addQuadVar, addQuadConst, poperPush,
  processTerm, processAssign, processFactor, 
  processExp, processHypExp
} = actions;

parser.createDir         = _                 => createDir();
parser.setName           = NAME              => setName(NAME);
parser.deleteDir         = _                 => deleteDir();
parser.setVars           = ID                => setVars(ID);
parser.setType           = TYPE              => setType(TYPE);
parser.setTable          = _                 => setTable();
parser.addQuadVar        = ID                => addQuadVar(ID);
parser.addQuadConst      = (DATA, TYPE)      => addQuadConst(DATA, TYPE);
parser.poperPush         = OP                => poperPush(OP);
parser.processTerm       = _                 => processTerm();
parser.processFactor     = _                 => processFactor();
parser.processAssign     = ID                => processAssign(ID);
parser.processExp        = _                 => processExp();
parser.processHypExp     = _                 => processHypExp();/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var parser = yy.parser;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 12;
break;
case 2:/* ignore comment */;
break;
case 3:/* IGNORE */
break;
case 4:return 33;
break;
case 5:return 10;
break;
case 6:return 38;
break;
case 7:return 49;
break;
case 8:return 104;
break;
case 9:return 106;
break;
case 10:return 109;
break;
case 11:return 111;
break;
case 12:return 110;
break;
case 13:return 103;
break;
case 14:return 'READ';
break;
case 15:return 'THIS';
break;
case 16:return 'NEW';
break;
case 17:return 16;
break;
case 18:return 39;
break;
case 19:return 40;
break;
case 20:return 42;
break;
case 21:return 41;
break;
case 22:return 38;
break;
case 23:return 'TRUE';
break;
case 24:return "FALSE";
break;
case 25:return 'NULL';
break;
case 26:return 'NAN';
break;
case 27:return 32;
break;
case 28:return 31;
break;
case 29:return 79;
break;
case 30:return 78;
break;
case 31:return 77
break;
case 32:return 76
break;
case 33:return 73;
break;
case 34:return 75;
break;
case 35:return 72;
break;
case 36:return 74;
break;
case 37:return 15;
break;
case 38:return 99;
break;
case 39:return 28;
break;
case 40:return 100;
break;
case 41:return 'CTEB';
break;
case 42:return 60;
break;
case 43:return 88;
break;
case 44:return 87;
break;
case 45:return 94;
break;
case 46:return 96;  
break;
case 47:return 95;
break;
case 48:return 81;
break;
case 49:return 80;
break;
case 50:return 'NOT';
break;
case 51:return 27
break;
case 52:return 29
break;
case 53:return 44;
break;
case 54:return 46;
break;
case 55:return 34;
break;
case 56:return 36;
break;
case 57:return 'DOT';
break;
case 58:return 24;
break;
case 59:return 7;
break;
case 60:return 21;
break;
case 61:/* skip whitespace */;
break;
case 62:/* skip EOL */;
break;
case 63:/* skip tab */;
break;
case 64:throw 'Illegal character';
break;
case 65:return 14;
break;
}
},
rules: [/^(?:program\b)/,/^(?:end\b)/,/^(?:\/\/.*\n)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:function\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:foreach\b)/,/^(?:while\b)/,/^(?:in\b)/,/^(?:print\b)/,/^(?:readLine\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:nan\b)/,/^(?:dataset\b)/,/^(?:vector\b)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9])+)/,/^(?:".*")/,/^(?:true|false\b)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}