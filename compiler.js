/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,31],$V1=[2,7],$V2=[1,8],$V3=[2,21],$V4=[1,10],$V5=[2,13],$V6=[1,16],$V7=[7,24],$V8=[10,16,31,48,110,111,112,119,132,133,134,135,136,137,144,145,146,147,148,149,152,153],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,35],$Ve=[1,39],$Vf=[24,26,35],$Vg=[1,65],$Vh=[2,37],$Vi=[1,56],$Vj=[1,55],$Vk=[1,53],$Vl=[1,64],$Vm=[1,80],$Vn=[1,81],$Vo=[1,82],$Vp=[1,83],$Vq=[1,84],$Vr=[1,85],$Vs=[1,86],$Vt=[1,87],$Vu=[1,88],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,92],$Vz=[1,93],$VA=[1,96],$VB=[16,48,110,111,112,119,132,133,134,135,136,137,144,145,146,147,148,149,152,153],$VC=[16,29,33,35,88,89,100,101,102,103,132,133,134,135,136,137,144,145,146,147,148,149,152,153],$VD=[24,26,30,35,73,74,75,76,77,78,79,80,81,82,88,89,94,95,96],$VE=[1,112],$VF=[2,99],$VG=[2,29],$VH=[1,153],$VI=[1,147],$VJ=[1,139],$VK=[1,143],$VL=[1,142],$VM=[1,148],$VN=[1,149],$VO=[1,150],$VP=[1,151],$VQ=[24,35],$VR=[26,35,81,82],$VS=[24,26,30,35,73,74,75,76,77,78,79,80,81,82,88,89],$VT=[16,29,100,101,102,103,132,133,134,135,136,137,144,145,146,147,148,149,152,153],$VU=[2,110],$VV=[26,35],$VW=[24,26,30,35,73,74,75,76,77,78,79,80,81,82],$VX=[24,26,30,35,58,73,74,75,76,77,78,79,80,81,82,88,89,94,95,96],$VY=[16,29,33,88,89,100,101,102,103,132,133,134,135,136,137,144,145,146,147,148,149,152,153];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROGRAM":4,"p1":5,"p2":6,"COLON":7,"var":8,"modules":9,"MAIN":10,"p4":11,"block":12,"END":13,"p3":14,"EOF":15,"ID":16,"VAR":17,"var-recursive":18,"var-follow":19,"var-types":20,"v3":21,"v4":22,"v5":23,"COMMA":24,"v2":25,"SEMICOLON":26,"type":27,"LBRACKET":28,"CTEI":29,"RBRACKET":30,"FUNCTION":31,"module1":32,"LPAREN":33,"params":34,"RPAREN":35,"block-vars":36,"module6":37,"module2":38,"module3":39,"params-recursive":40,"module5":41,"INT":42,"FLOAT":43,"BOOL":44,"STRING":45,"LBRACE":46,"block-inside":47,"RBRACE":48,"statement":49,"assignation":50,"condition":51,"cycle":52,"print":53,"read":54,"call":55,"native-functions":56,"assignation-destination":57,"ASSIGN":58,"and-or-expression":59,"id":60,"array":61,"matrix":62,"expression":63,"exp":64,"exp2":65,"expression-recursive":66,"exp1":67,"expression-op":68,"hexp2":69,"and-or-expression-recursive":70,"hexp1":71,"and-or-expression-op":72,"GREATER":73,"GREATER_EQUAL":74,"LESSER":75,"LESSER_EQUAL":76,"DIFF":77,"DEEP_DIFF":78,"EQUAL":79,"DEEP_EQUAL":80,"AND":81,"OR":82,"term":83,"e2":84,"exp-recursive":85,"e1":86,"exp-op":87,"MINUS":88,"PLUS":89,"factor":90,"t2":91,"term-recursive":92,"term-op":93,"TIMES":94,"REST":95,"DIVIDE":96,"t1":97,"factor-op":98,"var-cte":99,"CTEF":100,"CTES":101,"TRUE":102,"FALSE":103,"call1":104,"call2":105,"call-exp":106,"call5":107,"call3":108,"call4":109,"READLINE":110,"PRINT":111,"IF":112,"cond1":113,"condition-else":114,"cond2":115,"ELSE":116,"cond3":117,"cycle-while":118,"WHILE":119,"while1":120,"while2":121,"while3":122,"stadistics":123,"distributions":124,"plot":125,"stdev":126,"range":127,"min":128,"max":129,"variance":130,"mean":131,"STDEV":132,"RANGE":133,"MIN":134,"MAX":135,"VARIANCE":136,"MEAN":137,"dNormP":138,"dNormC":139,"dBinomialP":140,"dBinomialC":141,"dUniformP":142,"dUniformC":143,"DNORMP":144,"DNORMC":145,"DBINOMIALP":146,"DBINOMIALC":147,"DUNIFORMP":148,"DUNIFORMC":149,"barPlot":150,"linePlot":151,"BARPLOT":152,"LINEPLOT":153,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",7:"COLON",10:"MAIN",13:"END",15:"EOF",16:"ID",17:"VAR",24:"COMMA",26:"SEMICOLON",28:"LBRACKET",29:"CTEI",30:"RBRACKET",31:"FUNCTION",33:"LPAREN",35:"RPAREN",42:"INT",43:"FLOAT",44:"BOOL",45:"STRING",46:"LBRACE",48:"RBRACE",58:"ASSIGN",73:"GREATER",74:"GREATER_EQUAL",75:"LESSER",76:"LESSER_EQUAL",77:"DIFF",78:"DEEP_DIFF",79:"EQUAL",80:"DEEP_EQUAL",81:"AND",82:"OR",88:"MINUS",89:"PLUS",94:"TIMES",95:"REST",96:"DIVIDE",100:"CTEF",101:"CTES",102:"TRUE",103:"FALSE",110:"READLINE",111:"PRINT",112:"IF",116:"ELSE",119:"WHILE",132:"STDEV",133:"RANGE",134:"MIN",135:"MAX",136:"VARIANCE",137:"MEAN",144:"DNORMP",145:"DNORMC",146:"DBINOMIALP",147:"DBINOMIALC",148:"DUNIFORMP",149:"DUNIFORMC",152:"BARPLOT",153:"LINEPLOT"},
productions_: [0,[3,12],[5,0],[6,1],[14,0],[11,0],[8,3],[8,0],[20,1],[20,1],[20,1],[18,1],[18,3],[18,0],[19,4],[25,1],[21,1],[22,4],[23,7],[9,8],[9,7],[9,0],[34,4],[40,2],[40,0],[32,1],[38,1],[39,1],[41,0],[37,0],[27,1],[27,1],[27,1],[27,1],[12,3],[36,5],[47,2],[47,0],[49,1],[49,1],[49,1],[49,1],[49,1],[49,2],[49,2],[50,4],[57,1],[57,1],[57,1],[63,3],[66,2],[66,0],[67,1],[65,0],[59,3],[70,2],[70,0],[71,1],[69,0],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[72,1],[72,1],[64,3],[85,2],[85,0],[87,1],[87,1],[86,1],[84,0],[83,3],[93,1],[93,1],[93,1],[92,2],[92,0],[97,1],[91,0],[90,3],[90,2],[90,1],[98,1],[98,1],[98,0],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[60,1],[61,4],[62,7],[55,5],[55,4],[106,5],[106,2],[104,2],[105,0],[108,0],[109,0],[107,0],[54,7],[53,5],[51,8],[114,3],[114,0],[113,0],[115,0],[117,0],[52,1],[118,8],[120,0],[121,0],[122,0],[56,1],[56,1],[56,1],[123,1],[123,1],[123,1],[123,1],[123,1],[123,1],[126,4],[127,4],[128,4],[129,4],[130,4],[131,4],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[138,6],[139,6],[140,8],[141,8],[142,8],[143,8],[125,1],[125,1],[150,8],[151,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 yy.parser.createDir() 
break;
case 3:
 yy.parser.setName($$[$0]) 
break;
case 4:
 yy.parser.deleteDir() 
break;
case 5:
 yy.parser.setMain() 
break;
case 15:
 yy.parser.setType($$[$0]) 
break;
case 16:
 yy.parser.setVars($$[$0]); 
break;
case 17:
 yy.parser.setArr($$[$0-3], $$[$0-1]); 
break;
case 18:
 yy.parser.setMat($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 25:
 yy.parser.setTable($$[$0]) 
break;
case 26:
 yy.parser.setParams($$[$0]) 
break;
case 27:
 yy.parser.setParamsType($$[$0])
break;
case 28:
 yy.parser.setFunParams()
break;
case 29:
 yy.parser.deleteFunction(); 
break;
case 45:
yy.parser.processAssign($$[$0-3])
break;
case 52: case 57: case 74: case 82:
 yy.parser.poperPush($$[$0]) 
break;
case 53:
yy.parser.processExp()
break;
case 58:
yy.parser.processHypExp()
break;
case 75:
yy.parser.processTerm()
break;
case 83:
yy.parser.processFactor()
break;
case 93:
yy.parser.pushConst($$[$0],'int')
break;
case 94:
yy.parser.pushConst($$[$0],'float')
break;
case 95:
yy.parser.pushConst($$[$0],'string')
break;
case 96:
yy.parser.pushConst($$[$0],'bool')
break;
case 97:
yy.parser.pushConst($$[$0], 'bool')
break;
case 99:
yy.parser.pushVar($$[$0])
break;
case 100:
 yy.parser.pushArr($$[$0-3]) 
break;
case 101:
yy.parser.pushMat($$[$0-6])
break;
case 106:
 yy.parser.checkProcedure($$[$0-1]) 
break;
case 107:
 yy.parser.pushERA() 
break;
case 108:
 yy.parser.getArgument() 
break;
case 109:
 yy.parser.nextArgument() 
break;
case 110:
 yy.parser.pushGOSUB() 
break;
case 111:
 yy.parser.pushReadLine($$[$0-2]) 
break;
case 112:
 yy.parser.pushPrint() 
break;
case 116:
yy.parser.processCond()
break;
case 117:
yy.parser.endCond()
break;
case 118:
yy.parser.processElse()
break;
case 121:
 yy.parser.pushJump()
break;
case 122:
 yy.parser.processWhile()
break;
case 123:
 yy.parser.endWhile()
break;
case 133:
yy.parser.pushStdDev($$[$0-1])
break;
case 134:
yy.parser.pushRange($$[$0-1])
break;
case 135:
yy.parser.pushMin($$[$0-1])
break;
case 136:
yy.parser.pushMax($$[$0-1])
break;
case 137:
yy.parser.pushVariance($$[$0-1])
break;
case 138:
yy.parser.pushMean($$[$0-1])
break;
case 145:
yy.parser.pushNormPDF($$[$0-1])
break;
case 146:
yy.parser.pushNormCDF($$[$0-1])
break;
case 147:
yy.parser.pushBinomialPDF()
break;
case 148:
yy.parser.pushBinomialCDF()
break;
case 149:
yy.parser.pushUniformPDF()
break;
case 150:
yy.parser.pushUniformCDF()
break;
case 153:
yy.parser.pushBarPlot($$[$0-5], $$[$0-3])
break;
case 154:
yy.parser.pushLinePlot($$[$0-5], $$[$0-3])
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,16:[2,2]},{6:4,16:[1,5]},{7:[1,6]},{7:[2,3]},o($V0,$V1,{8:7,17:$V2}),{9:9,10:$V3,31:$V4},{7:$V5,16:$V6,18:11,20:12,21:13,22:14,23:15},{10:[1,17]},{16:[1,19],32:18},{7:[1,21],19:20},{7:[2,11],24:[1,22]},o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,16],{28:[1,23]}),{11:24,46:[2,5]},{33:[1,25]},{33:[2,25]},o($V8,[2,6]),{25:26,27:27,42:$V9,43:$Va,44:$Vb,45:$Vc},{7:$V5,16:$V6,18:32,20:12,21:13,22:14,23:15},{29:[1,33]},{12:34,46:$Vd},{16:$Ve,34:36,35:[1,37],38:38},{26:[1,40]},{26:[2,15]},o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),{7:[2,12]},{30:[1,41]},{13:[1,42]},{16:$Vg,47:43,48:$Vh,49:44,50:45,51:46,52:47,53:48,54:49,55:50,56:51,57:52,60:61,61:62,62:63,104:57,110:$Vi,111:$Vj,112:$Vk,118:54,119:$Vl,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{35:[1,94]},{36:95,46:$VA},{7:[1,97]},{7:[2,26]},o($V8,$V1,{8:98,17:$V2}),o($V7,[2,17],{28:[1,99]}),{14:100,15:[2,4]},{48:[1,101]},{16:$Vg,47:102,48:$Vh,49:44,50:45,51:46,52:47,53:48,54:49,55:50,56:51,57:52,60:61,61:62,62:63,104:57,110:$Vi,111:$Vj,112:$Vk,118:54,119:$Vl,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VB,[2,38]),o($VB,[2,39]),o($VB,[2,40]),o($VB,[2,41]),o($VB,[2,42]),{26:[1,103]},{26:[1,104]},{58:[1,105]},{33:[1,106]},o($VB,[2,119]),{33:[1,107]},{33:[1,108]},o($VC,[2,107],{105:109}),o($VD,[2,124]),o($VD,[2,125]),o($VD,[2,126]),{58:[2,46]},{58:[2,47]},{58:[2,48]},{33:[2,121],120:110},{28:$VE,33:[1,111],58:$VF},o($VD,[2,127]),o($VD,[2,128]),o($VD,[2,129]),o($VD,[2,130]),o($VD,[2,131]),o($VD,[2,132]),o($VD,[2,139]),o($VD,[2,140]),o($VD,[2,141]),o($VD,[2,142]),o($VD,[2,143]),o($VD,[2,144]),o($VD,[2,151]),o($VD,[2,152]),{33:[1,113]},{33:[1,114]},{33:[1,115]},{33:[1,116]},{33:[1,117]},{33:[1,118]},{33:[1,119]},{33:[1,120]},{33:[1,121]},{33:[1,122]},{33:[1,123]},{33:[1,124]},{33:[1,125]},{33:[1,126]},{36:127,46:$VA},o($V0,$VG,{37:128}),o($VB,$V1,{8:129,17:$V2}),{27:131,39:130,42:$V9,43:$Va,44:$Vb,45:$Vc},o($V8,[2,14]),{29:[1,132]},{15:[1,133]},o([13,16,48,110,111,112,116,119,132,133,134,135,136,137,144,145,146,147,148,149,152,153],[2,34]),{48:[2,36]},o($VB,[2,43]),o($VB,[2,44]),{16:$VH,29:$VI,33:$VJ,56:152,59:134,60:144,61:145,62:146,63:135,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,59:154,60:144,61:145,62:146,63:135,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:155,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:156,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,35:[1,158],56:152,60:144,61:145,62:146,64:159,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,106:157,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{33:[1,160]},o($VC,[2,106]),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:161,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:[1,162]},{16:[1,163]},{16:[1,164]},{16:[1,165]},{16:[1,166]},{16:[1,167]},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:168,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:169,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:170,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:171,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:172,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:173,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:[1,174]},{16:[1,175]},o($V0,$VG,{37:176}),{9:177,10:$V3,31:$V4},o($VB,[2,28],{41:178}),{24:[1,180],35:[2,24],40:179},o($VQ,[2,27]),{30:[1,181]},{1:[2,1]},{26:[1,182]},o($VR,[2,58],{69:183}),o([26,35,73,74,75,76,77,78,79,80,81,82],[2,53],{65:184}),o($VS,[2,75],{84:185}),o($VD,[2,83],{91:186}),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,63:187,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,56:152,60:144,61:145,62:146,99:188,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VD,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($VD,[2,90]),o($VD,[2,91]),o($VD,[2,92]),o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,95]),o($VD,[2,96]),o($VD,[2,97]),o($VD,[2,98]),o($VD,$VF,{28:$VE}),{35:[1,189]},{35:[1,190]},{24:[1,191]},{35:[1,192]},{26:$VU,107:193},o($VQ,[2,108],{108:194}),{16:$VH,29:$VI,33:$VJ,56:152,59:195,60:144,61:145,62:146,63:135,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{30:[1,196]},{35:[1,197]},{35:[1,198]},{35:[1,199]},{35:[1,200]},{35:[1,201]},{35:[1,202]},{24:[1,203]},{24:[1,204]},{24:[1,205]},{24:[1,206]},{24:[1,207]},{24:[1,208]},{24:[1,209]},{24:[1,210]},{9:211,10:$V3,31:$V4},{10:[2,20]},{16:$Vg,47:212,48:$Vh,49:44,50:45,51:46,52:47,53:48,54:49,55:50,56:51,57:52,60:61,61:62,62:63,104:57,110:$Vi,111:$Vj,112:$Vk,118:54,119:$Vl,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{35:[2,22]},{16:$Ve,34:213,38:38},o($V7,[2,18]),o($VB,[2,45]),o($VV,[2,56],{70:214,71:215,72:216,81:[1,217],82:[1,218]}),o($VR,[2,51],{66:219,67:220,68:221,73:[1,222],74:[1,223],75:[1,224],76:[1,225],77:[1,226],78:[1,227],79:[1,228],80:[1,229]}),o($VW,[2,71],{85:230,86:231,87:232,88:[1,233],89:[1,234]}),o($VS,[2,81],{92:235,97:236,93:237,94:[1,238],95:[1,239],96:[1,240]}),{35:[1,241]},o($VD,[2,85]),{46:[2,116],113:242},{26:[1,243]},{16:[1,244]},{26:$VU,107:245},{26:[2,103]},{24:[1,246],35:[2,105]},{35:[1,247]},o($VX,[2,100],{28:[1,248]}),o($VD,[2,133]),o($VD,[2,134]),o($VD,[2,135]),o($VD,[2,136]),o($VD,[2,137]),o($VD,[2,138]),{16:[1,249]},{16:[1,250]},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:251,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:252,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:253,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:254,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:[1,255]},{16:[1,256]},{10:[2,19]},{48:[1,257]},{35:[2,23]},o($VV,[2,54]),{16:$VH,29:$VI,33:$VJ,56:152,59:258,60:144,61:145,62:146,63:135,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VY,[2,57]),o($VY,[2,67]),o($VY,[2,68]),o($VR,[2,49]),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,63:259,64:136,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VY,[2,52]),o($VY,[2,59]),o($VY,[2,60]),o($VY,[2,61]),o($VY,[2,62]),o($VY,[2,63]),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,66]),o($VW,[2,69]),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:260,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VY,[2,74]),o($VY,[2,72]),o($VY,[2,73]),o($VS,[2,76]),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,83:261,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VY,[2,82]),o($VY,[2,77]),o($VY,[2,78]),o($VY,[2,79]),o($VD,[2,84]),{12:262,46:$Vd},o($VB,[2,112]),{35:[1,263]},{26:[2,102]},o($VY,[2,109],{109:264}),{46:[2,122],121:265},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:266,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{35:[1,267]},{35:[1,268]},{24:[1,269]},{24:[1,270]},{24:[1,271]},{24:[1,272]},{24:[1,273]},{24:[1,274]},o($V0,[2,35]),o($VV,[2,55]),o($VR,[2,50]),o($VW,[2,70]),o($VS,[2,80]),o($VB,[2,115],{114:275,116:[1,276]}),{26:[1,277]},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:159,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,106:278,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{12:279,46:$Vd},{30:[1,280]},o($VD,[2,145]),o($VD,[2,146]),{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:281,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:282,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:283,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:284,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:285,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},{16:$VH,29:$VI,33:$VJ,56:152,60:144,61:145,62:146,64:286,83:137,88:$VK,89:$VL,90:138,98:140,99:141,100:$VM,101:$VN,102:$VO,103:$VP,123:58,124:59,125:60,126:66,127:67,128:68,129:69,130:70,131:71,132:$Vm,133:$Vn,134:$Vo,135:$Vp,136:$Vq,137:$Vr,138:72,139:73,140:74,141:75,142:76,143:77,144:$Vs,145:$Vt,146:$Vu,147:$Vv,148:$Vw,149:$Vx,150:78,151:79,152:$Vy,153:$Vz},o($VB,[2,117],{115:287}),{46:[2,118],117:288},o($VB,[2,111]),{35:[2,104]},o($VB,[2,123],{122:289}),o($VX,[2,101]),{35:[1,290]},{35:[1,291]},{35:[1,292]},{35:[1,293]},{35:[1,294]},{35:[1,295]},o($VB,[2,113]),{12:296,46:$Vd},o($VB,[2,120]),o($VD,[2,147]),o($VD,[2,148]),o($VD,[2,149]),o($VD,[2,150]),o($VD,[2,153]),o($VD,[2,154]),o($VB,[2,114])],
defaultActions: {5:[2,3],19:[2,25],27:[2,15],32:[2,12],39:[2,26],61:[2,46],62:[2,47],63:[2,48],102:[2,36],133:[2,1],177:[2,20],179:[2,22],193:[2,103],211:[2,19],213:[2,23],245:[2,102],278:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var actions = require('./actions');
const { 
  createDir, deleteDir, setName,
  setVars, setType, setTable,
  pushVar, pushConst, poperPush,
  pushArr, pushMat,
  processTerm, processAssign, processFactor, 
  processExp, processHypExp, 
  processCond, endCond, processElse,
  pushJump, processWhile, endWhile,
  deleteFunction, setFunType, setFunParams,
  setParams, setParamsType, setMain,
  checkProcedure, pushERA, getArgument, nextArgument, pushGOSUB
} = actions;

parser.createDir         = _                 => createDir();
parser.setName           = NAME              => setName(NAME);
parser.deleteDir         = _                 => deleteDir();
parser.setVars           = ID                => setVars(ID);
parser.setType           = TYPE              => setType(TYPE);
parser.setTable          = ID                => setTable(ID);
parser.pushVar           = ID                => pushVar(ID);
parser.pushArr           = ID                => pushArr(ID);
parser.pushMat           = ID                => pushMat(ID);
parser.pushConst         = (DATA, TYPE)      => pushConst(DATA, TYPE);
parser.poperPush         = OP                => poperPush(OP);
parser.processTerm       = _                 => processTerm();
parser.processFactor     = _                 => processFactor();
parser.processAssign     = ID                => processAssign(ID);
parser.processExp        = _                 => processExp();
parser.processHypExp     = _                 => processHypExp();
parser.processCond       = _                 => processCond();
parser.endCond           = _                 => endCond();
parser.processElse       = _                 => processElse();
parser.pushJump          = _                 => pushJump();
parser.processWhile      = _                 => processWhile();
parser.endWhile          = _                 => endWhile();
parser.setFunType        = TYPE              => setFunType(TYPE);
parser.deleteFunction    = _                 => deleteFunction();
parser.setFunParams      = _                 => setFunParams();
parser.setParams         = ID                => setParams(ID);
parser.setParamsType     = TYPE              => setParamsType(TYPE);                   
parser.checkProcedure    = ID                => checkProcedure(ID);
parser.pushERA           = _                 => pushERA();
parser.getArgument       = _                 => getArgument();
parser.nextArgument      = _                 => nextArgument();
parser.pushGOSUB         = _                 => pushGOSUB();
parser.pushReadLine      = ID                => pushReadLine(ID);
parser.pushPrint         = _                 => pushPrint();
parser.setMain           = _                 => setMain();
parser.setArr            = (ID, S1)          => setArr(ID, S1);
parser.setMat            = (ID, S1, S2)      => setMat(ID, S1, S2);
parser.processReturn     = _                 => processReturn();
parser.pushStdDev        = ID                => pushStdDev(ID);
parser.pushMax           = ID                => pushMax(ID);
parser.pushMin           = ID                => pushMin(ID);
parser.pushRange         = ID                => pushRange(ID);
parser.pushVariance      = ID                => pushVariance(ID);
parser.pushMean          = ID                => pushMean(ID);
parser.pushNormPDF       = ID                => pushNormPDF(ID);
parser.pushNormCDF       = ID                => pushNormCDF(ID);
parser.pushUniformPDF    = _                 => pushUniformPDF();
parser.pushUniformCDF    = _                 => pushUniformCDF();
parser.pushBinomialPDF   = _                 => pushBinomialPDF();
parser.pushBinomialCDF   = _                 => pushBinomialCDF();
parser.pushBarPlot       = (X,Y)             => pushBarPlot(X,Y);
parser.pushLinePlot      = (X,Y)             => pushLinePlot(X,Y);
parser.pushPiePlot       = (X,Y)             => pushPiePlot(X,Y);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var parser = yy.parser;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 13;
break;
case 2:/* ignore comment */;
break;
case 3:/* IGNORE */
break;
case 4:return 31;
break;
case 5:return 10;
break;
case 6:return 'VOID';
break;
case 7:return 112;
break;
case 8:return 116;
break;
case 9:return 119;
break;
case 10:return 111;
break;
case 11:return 110;
break;
case 12:return 17;
break;
case 13:return 42;
break;
case 14:return 43;
break;
case 15:return 45;
break;
case 16:return 44;
break;
case 17:return 'VOID';
break;
case 18:return 102;
break;
case 19:return "FALSE";
break;
case 20:return 'NULL';
break;
case 21:return 'NAN';
break;
case 22:return 'DATASET';
break;
case 23:return 'VECTOR';
break;
case 24:return 132;
break;
case 25:return 133;
break;
case 26:return 134;
break;
case 27:return 135;
break;
case 28:return 137;
break;
case 29:return 136;
break;
case 30:return 144;
break;
case 31:return 146;
break;
case 32:return 148;
break;
case 33:return 145;
break;
case 34:return 147;
break;
case 35:return 149;
break;
case 36:return 152;
break;
case 37:return 153;
break;
case 38:return 80;
break;
case 39:return 79;
break;
case 40:return 78
break;
case 41:return 77
break;
case 42:return 74;
break;
case 43:return 76;
break;
case 44:return 73;
break;
case 45:return 75;
break;
case 46:return 16;
break;
case 47:return 100;
break;
case 48:return 29;
break;
case 49:return 101;
break;
case 50:return 'CTEB';
break;
case 51:return 58;
break;
case 52:return 89;
break;
case 53:return 88;
break;
case 54:return 94;
break;
case 55:return 96;  
break;
case 56:return 95;
break;
case 57:return 82;
break;
case 58:return 81;
break;
case 59:return 'NOT';
break;
case 60:return 28
break;
case 61:return 30
break;
case 62:return 46;
break;
case 63:return 48;
break;
case 64:return 33;
break;
case 65:return 35;
break;
case 66:return 'DOT';
break;
case 67:return 26;
break;
case 68:return 7;
break;
case 69:return 24;
break;
case 70:/* skip whitespace */;
break;
case 71:/* skip EOL */;
break;
case 72:/* skip tab */;
break;
case 73:throw 'Illegal character';
break;
case 74:return 15;
break;
}
},
rules: [/^(?:program\b)/,/^(?:end\b)/,/^(?:\/\/.*\n)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:function\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:print\b)/,/^(?:readline\b)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:NaN\b)/,/^(?:dataset\b)/,/^(?:vector\b)/,/^(?:stdev\b)/,/^(?:range\b)/,/^(?:min\b)/,/^(?:max\b)/,/^(?:mean\b)/,/^(?:variance\b)/,/^(?:dNormPdf\b)/,/^(?:dBinomialPdf\b)/,/^(?:dUniformPdf\b)/,/^(?:dNormCdf\b)/,/^(?:dBinomialCdf\b)/,/^(?:dUniformCdf\b)/,/^(?:barPlot\b)/,/^(?:linePlot\b)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:([0-9]+(\.[0-9]+)?)f\b)/,/^(?:([0-9])+)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:true|false\b)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}