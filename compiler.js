/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compiler = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,32],$V1=[2,7],$V2=[1,8],$V3=[2,22],$V4=[1,10],$V5=[2,13],$V6=[1,16],$V7=[7,24],$V8=[10,16,32,54,58,118,119,120,128,130,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,34],$Ve=[1,35],$Vf=[1,39],$Vg=[1,43],$Vh=[24,26,36,52],$Vi=[1,59],$Vj=[2,43],$Vk=[1,58],$Vl=[1,64],$Vm=[1,63],$Vn=[1,60],$Vo=[1,83],$Vp=[1,84],$Vq=[1,82],$Vr=[1,85],$Vs=[1,86],$Vt=[1,88],$Vu=[1,87],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,92],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[16,54,58,118,119,120,128,130,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166],$VI=[1,119],$VJ=[1,127],$VK=[1,120],$VL=[1,114],$VM=[1,118],$VN=[1,117],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,130],$VT=[1,157],$VU=[24,26,31,36,81,82,83,84,85,86,87,88,89,90,96,97],$VV=[24,26,31,36,81,82,83,84,85,86,87,88,89,90,96,97,102,103,104],$VW=[16,29,30,108,109,110,111],$VX=[1,199],$VY=[24,36],$VZ=[24,26,31,36,81,82,83,84,85,86,87,88,89,90],$V_=[24,31],$V$=[26,36,89,90],$V01=[2,44],$V11=[16,29,30,34,96,97,108,109,110,111],$V21=[26,36],$V31=[24,26,31,36,70,81,82,83,84,85,86,87,88,89,90,96,97,102,103,104],$V41=[2,119];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"PROGRAM":4,"p1":5,"p2":6,"COLON":7,"var":8,"modules":9,"MAIN":10,"p4":11,"block":12,"END":13,"p3":14,"EOF":15,"ID":16,"VAR":17,"var-recursive":18,"var-follow":19,"var-types":20,"v3":21,"v4":22,"v5":23,"COMMA":24,"v2":25,"SEMICOLON":26,"new-structure":27,"type":28,"LBRACKET":29,"CTEI":30,"RBRACKET":31,"FUNCTION":32,"module1":33,"LPAREN":34,"params":35,"RPAREN":36,"module4":37,"block-vars":38,"module6":39,"module-type":40,"VOID":41,"module2":42,"module3":43,"params-recursive":44,"INT":45,"FLOAT":46,"BOOL":47,"STRING":48,"structures":49,"VECTOR":50,"DATASET":51,"LBRACE":52,"block-inside":53,"RBRACE":54,"module5":55,"statement":56,"return-statement":57,"RETURN":58,"exp":59,"array":60,"array-item":61,"assignation":62,"condition":63,"cycle":64,"print":65,"read":66,"call":67,"native-functions":68,"var-cte-exp":69,"ASSIGN":70,"and-or-expression":71,"expression":72,"exp2":73,"expression-recursive":74,"exp1":75,"expression-op":76,"hexp2":77,"and-or-expression-recursive":78,"hexp1":79,"and-or-expression-op":80,"GREATER":81,"GREATER_EQUAL":82,"LESSER":83,"LESSER_EQUAL":84,"DIFF":85,"DEEP_DIFF":86,"EQUAL":87,"DEEP_EQUAL":88,"AND":89,"OR":90,"term":91,"e2":92,"exp-recursive":93,"e1":94,"exp-op":95,"MINUS":96,"PLUS":97,"factor":98,"t2":99,"term-recursive":100,"term-op":101,"TIMES":102,"REST":103,"DIVIDE":104,"t1":105,"factor-op":106,"var-cte":107,"CTEF":108,"CTES":109,"TRUE":110,"FALSE":111,"call1":112,"call2":113,"call-exp":114,"call5":115,"call3":116,"call4":117,"READLINE":118,"PRINT":119,"IF":120,"cond1":121,"condition-else":122,"cond2":123,"ELSE":124,"cond3":125,"cycle-for":126,"cycle-while":127,"FOREACH":128,"IN":129,"WHILE":130,"while1":131,"while2":132,"while3":133,"rbind":134,"cbind":135,"setNames":136,"getNames":137,"row":138,"col":139,"head":140,"tail":141,"stdev":142,"range":143,"min":144,"max":145,"variance":146,"dnorm":147,"dbinomial":148,"duniform":149,"plot":150,"RBIND":151,"CBIND":152,"GETNAMES":153,"SETNAMES":154,"ROW":155,"COL":156,"HEAD":157,"TAIL":158,"STDEV":159,"RANGE":160,"MIN":161,"MAX":162,"VARIANCE":163,"DNORM":164,"DBINOMAIL":165,"DUNIFORM":166,"barPlot":167,"PLOT":168,"linePlot":169,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",7:"COLON",10:"MAIN",13:"END",15:"EOF",16:"ID",17:"VAR",24:"COMMA",26:"SEMICOLON",27:"new-structure",29:"LBRACKET",30:"CTEI",31:"RBRACKET",32:"FUNCTION",34:"LPAREN",36:"RPAREN",41:"VOID",45:"INT",46:"FLOAT",47:"BOOL",48:"STRING",50:"VECTOR",51:"DATASET",52:"LBRACE",54:"RBRACE",58:"RETURN",70:"ASSIGN",81:"GREATER",82:"GREATER_EQUAL",83:"LESSER",84:"LESSER_EQUAL",85:"DIFF",86:"DEEP_DIFF",87:"EQUAL",88:"DEEP_EQUAL",89:"AND",90:"OR",96:"MINUS",97:"PLUS",102:"TIMES",103:"REST",104:"DIVIDE",108:"CTEF",109:"CTES",110:"TRUE",111:"FALSE",118:"READLINE",119:"PRINT",120:"IF",124:"ELSE",128:"FOREACH",129:"IN",130:"WHILE",150:"plot",151:"RBIND",152:"CBIND",153:"GETNAMES",154:"SETNAMES",155:"ROW",156:"COL",157:"HEAD",158:"TAIL",159:"STDEV",160:"RANGE",161:"MIN",162:"MAX",163:"VARIANCE",164:"DNORM",165:"DBINOMAIL",166:"DUNIFORM",168:"PLOT"},
productions_: [0,[3,12],[5,0],[6,1],[14,0],[11,0],[8,3],[8,0],[20,1],[20,1],[20,1],[18,1],[18,3],[18,0],[19,4],[19,4],[25,1],[21,1],[22,4],[23,7],[9,10],[9,9],[9,0],[40,1],[40,1],[35,4],[44,2],[44,0],[33,1],[42,1],[43,1],[37,1],[28,1],[28,1],[28,1],[28,1],[28,1],[49,1],[49,1],[12,3],[38,5],[53,2],[53,1],[53,0],[39,0],[55,0],[57,3],[60,3],[61,3],[61,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,2],[56,1],[62,5],[62,4],[72,3],[74,2],[74,0],[75,1],[73,0],[71,3],[78,2],[78,0],[79,1],[77,0],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[80,1],[80,1],[59,3],[93,2],[93,0],[95,1],[95,1],[94,1],[92,0],[91,3],[101,1],[101,1],[101,1],[100,2],[100,0],[105,1],[99,0],[98,3],[98,2],[98,1],[106,1],[106,1],[106,0],[107,2],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[69,4],[69,0],[67,6],[67,5],[114,5],[114,2],[112,1],[113,0],[116,0],[117,0],[115,0],[66,7],[65,5],[63,8],[122,3],[122,0],[121,0],[123,0],[125,0],[64,1],[64,1],[126,7],[127,8],[131,0],[132,0],[133,0],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[134,7],[135,9],[137,4],[136,6],[138,6],[139,6],[140,6],[141,6],[142,4],[143,4],[144,4],[145,4],[146,4],[147,8],[148,8],[149,8],[167,4],[169,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
 yy.parser.createDir() 
break;
case 3:
 yy.parser.setName($$[$0]) 
break;
case 4:
 yy.parser.deleteDir() 
break;
case 5:
 yy.parser.setMain() 
break;
case 16:
 yy.parser.setType($$[$0]) 
break;
case 17:
 yy.parser.setVars($$[$0]); 
break;
case 18:
 yy.parser.setArr($$[$0-3], $$[$0-1]); 
break;
case 19:
 yy.parser.setMat($$[$0-6], $$[$0-4], $$[$0-1]) 
break;
case 28:
 yy.parser.setTable($$[$0]) 
break;
case 29:
 yy.parser.setParams($$[$0]) 
break;
case 30:
 yy.parser.setParamsType($$[$0])
break;
case 31:
 yy.parser.setFunType($$[$0])
break;
case 44:
 yy.parser.deleteFunction(); 
break;
case 45:
 yy.parser.setFunParams()
break;
case 46:
 yy.parser.processReturn()
break;
case 48:
 this.$ = $$[$0-2] + ',' + $$[$0] 
break;
case 49:
 this.$ = $$[$0] 
break;
case 58:
yy.parser.processAssign($$[$0-3], $$[$0-1])
break;
case 62: case 67: case 84: case 92:
 yy.parser.poperPush($$[$0]) 
break;
case 63:
yy.parser.processExp()
break;
case 68:
yy.parser.processHypExp()
break;
case 85:
yy.parser.processTerm()
break;
case 93:
yy.parser.processFactor()
break;
case 101:
yy.parser.addQuadVar($$[$0])
break;
case 102:
yy.parser.addQuadConst($$[$0],'int')
break;
case 103:
yy.parser.addQuadConst($$[$0],'float')
break;
case 104:
yy.parser.addQuadConst($$[$0],'string')
break;
case 105:
yy.parser.addQuadConst($$[$0],'bool')
break;
case 106:
yy.parser.addQuadConst($$[$0], 'bool')
break;
case 115:
 yy.parser.checkProcedure($$[$0]) 
break;
case 116:
 yy.parser.genERA() 
break;
case 117:
 yy.parser.getArgument() 
break;
case 118:
 yy.parser.nextArgument() 
break;
case 119:
 yy.parser.genGOSUB() 
break;
case 120:
 yy.parser.processReadLine($$[$0-2]) 
break;
case 121:
 yy.parser.processPrint() 
break;
case 125:
yy.parser.processCond()
break;
case 126:
yy.parser.endCond()
break;
case 127:
yy.parser.processElse()
break;
case 132:
 yy.parser.pushJump()
break;
case 133:
 yy.parser.processWhile()
break;
case 134:
 yy.parser.endWhile()
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,16:[2,2]},{6:4,16:[1,5]},{7:[1,6]},{7:[2,3]},o($V0,$V1,{8:7,17:$V2}),{9:9,10:$V3,32:$V4},{7:$V5,16:$V6,18:11,20:12,21:13,22:14,23:15},{10:[1,17]},{16:[1,19],33:18},{7:[1,21],19:20},{7:[2,11],24:[1,22]},o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,17],{29:[1,23]}),{11:24,52:[2,5]},{34:[1,25]},{34:[2,28]},o($V8,[2,6]),{25:26,27:[1,27],28:28,45:$V9,46:$Va,47:$Vb,48:$Vc,49:33,50:$Vd,51:$Ve},{7:$V5,16:$V6,18:36,20:12,21:13,22:14,23:15},{30:[1,37]},{12:38,52:$Vf},{16:$Vg,35:40,36:[1,41],42:42},{26:[1,44]},{26:[1,45]},{26:[2,16]},o($Vh,[2,32]),o($Vh,[2,33]),o($Vh,[2,34]),o($Vh,[2,35]),o($Vh,[2,36]),o($Vh,[2,37]),o($Vh,[2,38]),{7:[2,12]},{31:[1,46]},{13:[1,47]},{16:$Vi,53:48,54:$Vj,56:49,57:50,58:$Vk,62:51,63:52,64:53,65:54,66:55,67:56,68:57,112:65,118:$Vl,119:$Vm,120:$Vn,126:61,127:62,128:$Vo,130:$Vp,134:66,135:67,136:68,137:69,138:70,139:71,140:72,141:73,142:74,143:75,144:76,145:77,146:78,147:79,148:80,149:81,150:$Vq,151:$Vr,152:$Vs,153:$Vt,154:$Vu,155:$Vv,156:$Vw,157:$Vx,158:$Vy,159:$Vz,160:$VA,161:$VB,162:$VC,163:$VD,164:$VE,165:$VF,166:$VG},{36:[1,101]},{7:[1,102]},{7:[1,103]},{7:[2,29]},o($V8,$V1,{8:104,17:$V2}),o($V8,$V1,{8:105,17:$V2}),o($V7,[2,18],{29:[1,106]}),{14:107,15:[2,4]},{54:[1,108]},{16:$Vi,53:109,54:$Vj,56:49,57:50,58:$Vk,62:51,63:52,64:53,65:54,66:55,67:56,68:57,112:65,118:$Vl,119:$Vm,120:$Vn,126:61,127:62,128:$Vo,130:$Vp,134:66,135:67,136:68,137:69,138:70,139:71,140:72,141:73,142:74,143:75,144:76,145:77,146:78,147:79,148:80,149:81,150:$Vq,151:$Vr,152:$Vs,153:$Vt,154:$Vu,155:$Vv,156:$Vw,157:$Vx,158:$Vy,159:$Vz,160:$VA,161:$VB,162:$VC,163:$VD,164:$VE,165:$VF,166:$VG},{54:[2,42]},o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),{26:[1,110]},o($VH,[2,56]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:111,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{29:$VS,34:[2,115],69:128,70:[1,129]},{34:[1,131]},o($VH,[2,128]),o($VH,[2,129]),{34:[1,132]},{34:[1,133]},{34:[1,134]},o($VH,[2,135]),o($VH,[2,136]),o($VH,[2,137]),o($VH,[2,138]),o($VH,[2,139]),o($VH,[2,140]),o($VH,[2,141]),o($VH,[2,142]),o($VH,[2,143]),o($VH,[2,144]),o($VH,[2,145]),o($VH,[2,146]),o($VH,[2,147]),o($VH,[2,148]),o($VH,[2,149]),o($VH,[2,150]),o($VH,[2,151]),{34:[1,135]},{34:[2,132],131:136},{34:[1,137]},{34:[1,138]},{34:[1,139]},{34:[1,140]},{34:[1,141]},{34:[1,142]},{34:[1,143]},{34:[1,144]},{34:[1,145]},{34:[1,146]},{34:[1,147]},{34:[1,148]},{34:[1,149]},{34:[1,150]},{34:[1,151]},{34:[1,152]},{7:[1,153]},{28:156,37:154,40:155,41:$VT,45:$V9,46:$Va,47:$Vb,48:$Vc,49:33,50:$Vd,51:$Ve},{28:159,43:158,45:$V9,46:$Va,47:$Vb,48:$Vc,49:33,50:$Vd,51:$Ve},o($V8,[2,14]),o($V8,[2,15]),{30:[1,160]},{15:[1,161]},o([13,16,54,58,118,119,120,124,128,130,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166],[2,39]),{54:[2,41]},o($VH,[2,55]),{26:[1,162]},o($VU,[2,85],{92:163}),o($VV,[2,93],{99:164}),{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,72:165,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,60:125,67:126,107:167,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($VV,[2,96]),o($VW,[2,97]),o($VW,[2,98]),o([24,26,31,34,36,81,82,83,84,85,86,87,88,89,90,96,97,102,103,104],[2,101],{69:168,29:$VS}),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),o($VV,[2,105]),o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:170,60:125,61:169,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{70:[1,171]},{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,71:172,72:173,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:174,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,71:175,72:173,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:176,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:177,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o([16,29,30,34,36,96,97,108,109,110,111],[2,116],{113:178}),{16:[1,179]},{34:[1,180]},{16:[1,181]},{16:[1,182]},{16:[1,183]},{16:[1,184]},{16:[1,185]},{16:[1,186]},{16:[1,187]},{16:[1,188]},{16:[1,189]},{16:[1,190]},{16:[1,191]},{16:[1,192]},{16:[1,193]},{16:$VI,29:$VJ,30:$VK,34:$VL,59:194,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:195,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:196,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{28:156,37:197,40:155,41:$VT,45:$V9,46:$Va,47:$Vb,48:$Vc,49:33,50:$Vd,51:$Ve},{38:198,52:$VX},{52:[2,31]},{52:[2,23]},{52:[2,24]},{24:[1,201],36:[2,27],44:200},o($VY,[2,30]),{31:[1,202]},{1:[2,1]},{54:[2,46]},o($VZ,[2,81],{93:203,94:204,95:205,96:[1,206],97:[1,207]}),o($VU,[2,91],{100:208,105:209,101:210,102:[1,211],103:[1,212],104:[1,213]}),{36:[1,214]},o([26,36,81,82,83,84,85,86,87,88,89,90],[2,63],{73:215}),o($VV,[2,95]),o($VV,[2,100]),{24:[1,217],31:[1,216]},o($V_,[2,49]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,71:218,72:173,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{26:[1,219]},o($V$,[2,68],{77:220}),{31:[1,221]},{36:[1,222]},{36:[1,223]},{24:[1,224]},{16:$VI,29:$VJ,30:$VK,34:$VL,36:[1,226],59:227,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65,114:225},{129:[1,228]},{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,71:229,72:173,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{24:[1,230]},{24:[1,231]},{24:[1,232]},{36:[1,233]},{24:[1,234]},{24:[1,235]},{24:[1,236]},{24:[1,237]},{36:[1,238]},{36:[1,239]},{36:[1,240]},{36:[1,241]},{36:[1,242]},{24:[1,243]},{24:[1,244]},{24:[1,245]},{38:246,52:$VX},o($V0,$V01,{39:247}),o($VH,$V1,{8:248,17:$V2}),{36:[2,25]},{16:$Vg,35:249,42:42},o($V7,[2,19]),o($VZ,[2,79]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:250,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($V11,[2,84]),o($V11,[2,82]),o($V11,[2,83]),o($VU,[2,86]),{16:$VI,29:$VJ,30:$VK,34:$VL,60:125,67:126,91:251,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($V11,[2,92]),o($V11,[2,87]),o($V11,[2,88]),o($V11,[2,89]),o($VV,[2,94]),o($V$,[2,61],{74:252,75:253,76:254,81:[1,255],82:[1,256],83:[1,257],84:[1,258],85:[1,259],86:[1,260],87:[1,261],88:[1,262]}),o($VV,[2,47]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:263,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{26:[1,264]},o($VH,[2,58]),o($V21,[2,66],{78:265,79:266,80:267,89:[1,268],90:[1,269]}),o($V31,[2,110],{69:270,29:$VS}),{52:[2,125],121:271},{26:[1,272]},{16:[1,273]},{36:[1,274]},o($VV,$V41,{115:275}),o($VY,[2,117],{116:276}),{16:[1,277]},{36:[1,278]},{16:[1,279]},{16:[1,280]},{50:[1,281]},o($VH,[2,154]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:282,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:283,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:284,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:285,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($VH,[2,160]),o($VH,[2,161]),o($VH,[2,162]),o($VH,[2,163]),o($VH,[2,164]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:286,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:287,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:288,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($V0,$V01,{39:289}),{9:290,10:$V3,32:$V4},o($VH,[2,45],{55:291}),{36:[2,26]},o($VZ,[2,80]),o($VU,[2,90]),o($V$,[2,59]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,72:292,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($V11,[2,62]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,72]),o($V11,[2,73]),o($V11,[2,74]),o($V11,[2,75]),o($V11,[2,76]),o($V_,[2,48]),o($VH,[2,57]),o($V21,[2,64]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:166,60:125,67:126,71:293,72:173,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($V11,[2,67]),o($V11,[2,77]),o($V11,[2,78]),o($V31,[2,109]),{12:294,52:$Vf},o($VH,[2,121]),{36:[1,295]},o($VV,$V41,{115:296}),o($VV,[2,112]),{24:[1,297],36:[2,114]},{36:[1,298]},{52:[2,133],132:299},{36:[1,300]},{24:[1,301]},{36:[1,302]},{36:[1,303]},{36:[1,304]},{36:[1,305]},{36:[1,306]},{24:[1,307]},{24:[1,308]},{24:[1,309]},{9:310,10:$V3,32:$V4},{10:[2,21]},{16:$Vi,53:311,54:$Vj,56:49,57:50,58:$Vk,62:51,63:52,64:53,65:54,66:55,67:56,68:57,112:65,118:$Vl,119:$Vm,120:$Vn,126:61,127:62,128:$Vo,130:$Vp,134:66,135:67,136:68,137:69,138:70,139:71,140:72,141:73,142:74,143:75,144:76,145:77,146:78,147:79,148:80,149:81,150:$Vq,151:$Vr,152:$Vs,153:$Vt,154:$Vu,155:$Vv,156:$Vw,157:$Vx,158:$Vy,159:$Vz,160:$VA,161:$VB,162:$VC,163:$VD,164:$VE,165:$VF,166:$VG},o($V$,[2,60]),o($V21,[2,65]),o($VH,[2,124],{122:312,124:[1,313]}),{26:[1,314]},o($VV,[2,111]),o($V11,[2,118],{117:315}),{12:316,52:$Vf},{12:317,52:$Vf},{26:[1,318]},{16:$VI,29:$VJ,30:$VK,34:$VL,59:319,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},o($VH,[2,155]),o($VH,[2,156]),o($VH,[2,157]),o($VH,[2,158]),o($VH,[2,159]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:320,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:321,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{16:$VI,29:$VJ,30:$VK,34:$VL,59:322,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65},{10:[2,20]},{54:[1,323]},o($VH,[2,126],{123:324}),{52:[2,127],125:325},o($VH,[2,120]),{16:$VI,29:$VJ,30:$VK,34:$VL,59:227,60:125,67:126,91:112,96:$VM,97:$VN,98:113,106:115,107:116,108:$VO,109:$VP,110:$VQ,111:$VR,112:65,114:326},o($VH,[2,130]),o($VH,[2,134],{133:327}),o($VH,[2,152]),{36:[1,328]},{36:[1,329]},{36:[1,330]},{36:[1,331]},o($V0,[2,40]),o($VH,[2,122]),{12:332,52:$Vf},{36:[2,113]},o($VH,[2,131]),{26:[1,333]},o($VH,[2,165]),o($VH,[2,166]),o($VH,[2,167]),o($VH,[2,123]),o($VH,[2,153])],
defaultActions: {5:[2,3],19:[2,28],28:[2,16],36:[2,12],43:[2,29],50:[2,42],109:[2,41],155:[2,31],156:[2,23],157:[2,24],161:[2,1],162:[2,46],200:[2,25],249:[2,26],290:[2,21],310:[2,20],326:[2,113]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var actions = require('./actions');
const { 
  createDir, deleteDir, setName,
  setVars, setType, setTable,
  addQuadVar, addQuadConst, poperPush,
  processTerm, processAssign, processFactor, 
  processExp, processHypExp, 
  processCond, endCond, processElse,
  pushJump, processWhile, endWhile,
  deleteFunction, setFunType, setFunParams,
  setParams, setParamsType, setMain,
  checkProcedure, genERA, getArgument, nextArgument, genGOSUB
} = actions;

parser.createDir         = _                 => createDir();
parser.setName           = NAME              => setName(NAME);
parser.deleteDir         = _                 => deleteDir();
parser.setVars           = ID                => setVars(ID);
parser.setType           = TYPE              => setType(TYPE);
parser.setTable          = ID                 => setTable(ID);
parser.addQuadVar        = ID                => addQuadVar(ID);
parser.addQuadConst      = (DATA, TYPE)      => addQuadConst(DATA, TYPE);
parser.poperPush         = OP                => poperPush(OP);
parser.processTerm       = _                 => processTerm();
parser.processFactor     = _                 => processFactor();
parser.processAssign     = ID                => processAssign(ID);
parser.processExp        = _                 => processExp();
parser.processHypExp     = _                 => processHypExp();
parser.processCond       = _                 => processCond();
parser.endCond           = _                 => endCond();
parser.processElse       = _                 => processElse();
parser.pushJump          = _                 => pushJump();
parser.processWhile      = _                 => processWhile();
parser.endWhile          = _                 => endWhile();
parser.setFunType        = TYPE              => setFunType(TYPE);
parser.deleteFunction    = _                 => deleteFunction();
parser.setFunParams      = _                 => setFunParams();
parser.setParams         = ID                => setParams(ID);
parser.setParamsType     = TYPE              => setParamsType(TYPE);                   
parser.checkProcedure    = ID                => checkProcedure(ID);
parser.genERA            = _                 => genERA();
parser.getArgument       = _                 => getArgument();
parser.nextArgument      = _                 => nextArgument();
parser.genGOSUB          = _                 => genGOSUB();
parser.processReadLine   = ID                => processReadLine(ID);
parser.processPrint      = _                 => processPrint();
parser.setMain           = _                 => setMain();
parser.setArr            = (ID, S1)          => setArr(ID, S1);
parser.setMat            = (ID, S1, S2)      => setMat(ID, S1, S2);
parser.processReturn     = _                 => processReturn();/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var parser = yy.parser;

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 13;
break;
case 2:/* ignore comment */;
break;
case 3:/* IGNORE */
break;
case 4:return 32;
break;
case 5:return 10;
break;
case 6:return 41;
break;
case 7:return 58;
break;
case 8:return 120;
break;
case 9:return 124;
break;
case 10:return 128;
break;
case 11:return 130;
break;
case 12:return 129;
break;
case 13:return 119;
break;
case 14:return 118;
break;
case 15:return 'THIS';
break;
case 16:return 'NEW';
break;
case 17:return 17;
break;
case 18:return 45;
break;
case 19:return 46;
break;
case 20:return 48;
break;
case 21:return 47;
break;
case 22:return 41;
break;
case 23:return 110;
break;
case 24:return "FALSE";
break;
case 25:return 'NULL';
break;
case 26:return 'NAN';
break;
case 27:return 51;
break;
case 28:return 50;
break;
case 29:return 151;                     
break;
case 30:return 152;
break;
case 31:return 154;
break;
case 32:return 153; 
break;
case 33:return 155; 
break;
case 34:return 156;
break;
case 35:return 157;
break;
case 36:return 158;
break;
case 37:return 159;
break;
case 38:return 160;
break;
case 39:return 161;
break;
case 40:return 162;
break;
case 41:return 163;
break;
case 42:return 164;
break;
case 43:return 'DBINOMIAL';
break;
case 44:return 166;
break;
case 45:return 168;
break;
case 46:return 88;
break;
case 47:return 87;
break;
case 48:return 86
break;
case 49:return 85
break;
case 50:return 82;
break;
case 51:return 84;
break;
case 52:return 81;
break;
case 53:return 83;
break;
case 54:return 16;
break;
case 55:return 108;
break;
case 56:return 30;
break;
case 57:return 109;
break;
case 58:return 'CTEB';
break;
case 59:return 70;
break;
case 60:return 97;
break;
case 61:return 96;
break;
case 62:return 102;
break;
case 63:return 104;  
break;
case 64:return 103;
break;
case 65:return 90;
break;
case 66:return 89;
break;
case 67:return 'NOT';
break;
case 68:return 29
break;
case 69:return 31
break;
case 70:return 52;
break;
case 71:return 54;
break;
case 72:return 34;
break;
case 73:return 36;
break;
case 74:return 'DOT';
break;
case 75:return 26;
break;
case 76:return 7;
break;
case 77:return 24;
break;
case 78:/* skip whitespace */;
break;
case 79:/* skip EOL */;
break;
case 80:/* skip tab */;
break;
case 81:throw 'Illegal character';
break;
case 82:return 15;
break;
}
},
rules: [/^(?:program\b)/,/^(?:end\b)/,/^(?:\/\/.*\n)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:function\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:foreach\b)/,/^(?:while\b)/,/^(?:in\b)/,/^(?:print\b)/,/^(?:readline\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:bool\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:nan\b)/,/^(?:dataset\b)/,/^(?:vector\b)/,/^(?:rbind\b)/,/^(?:cbind\b)/,/^(?:setNames\b)/,/^(?:getNames\b)/,/^(?:row\b)/,/^(?:col\b)/,/^(?:head\b)/,/^(?:tail\b)/,/^(?:stdev\b)/,/^(?:range\b)/,/^(?:min\b)/,/^(?:max\b)/,/^(?:variance\b)/,/^(?:dnorm\b)/,/^(?:dbinomial\b)/,/^(?:duniform\b)/,/^(?:plot\b)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:([0-9]+(\.[0-9]+)?)f\b)/,/^(?:([0-9])+)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:true|false\b)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compiler;
exports.Parser = compiler.Parser;
exports.parse = function () { return compiler.parse.apply(compiler, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}